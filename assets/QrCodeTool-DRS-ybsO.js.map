{"version":3,"file":"QrCodeTool-DRS-ybsO.js","sources":["../../src/components/QrCodeTool.jsx"],"sourcesContent":["import Layout from './Layout'; // Import the new Layout component\nimport { useState, useRef, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  QrCode, Scan, Link as LinkIcon, Wifi, User, Smartphone, ArrowLeft,\n  Copy, Download, Check, UploadCloud, RefreshCw, Settings, Info\n} from 'lucide-react';\nimport QRCode from 'qrcode';\n// We'll use Html5Qrcode instead of jsQR\nimport { Html5Qrcode, Html5QrcodeScanner, Html5QrcodeScanType } from 'html5-qrcode';\n\nfunction QrCodeTool() {\n  // QR code options\n  const qrTypes = [\n    { id: 'url', label: 'URL', icon: <LinkIcon size={18} />, placeholder: 'https://example.com' },\n    { id: 'text', label: 'Text', icon: <QrCode size={18} />, placeholder: 'Enter your text here' },\n    { id: 'wifi', label: 'Wi-Fi', icon: <Wifi size={18} />, placeholder: 'SSID' },\n    { id: 'contact', label: 'Contact', icon: <User size={18} />, placeholder: 'Contact details' }\n  ];\n\n  // State\n  const [qrType, setQrType] = useState('url');\n  const [qrValue, setQrValue] = useState('');\n  const [qrColor, setQrColor] = useState('#000000');\n  const [qrBgColor, setQrBgColor] = useState('#FFFFFF');\n  const [qrSize, setQrSize] = useState(200);\n  const [qrImageData, setQrImageData] = useState('');\n  const [activeTab, setActiveTab] = useState('generate'); // 'generate' or 'scan'\n  const [scanResult, setScanResult] = useState('');\n  const [copied, setCopied] = useState(false);\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [isScanning, setIsScanning] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [scanWithCamera, setScanWithCamera] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  // For Wi-Fi specific inputs\n  const [wifiName, setWifiName] = useState('');\n  const [wifiPassword, setWifiPassword] = useState('');\n  const [wifiEncryption, setWifiEncryption] = useState('WPA');\n  const [wifiHidden, setWifiHidden] = useState(false);\n\n  // For Contact specific inputs\n  const [contactName, setContactName] = useState('');\n  const [contactEmail, setContactEmail] = useState('');\n  const [contactPhone, setContactPhone] = useState('');\n  const [contactAddress, setContactAddress] = useState('');\n\n  // Refs\n  const qrCanvasRef = useRef(null);\n  const scannerDivRef = useRef(null); // For Html5Qrcode scanner\n  const html5QrCodeRef = useRef(null); // To store the Html5Qrcode instance\n  const fileInputRef = useRef(null);\n\n  // Clear all inputs\n  const clearAll = () => {\n    setQrValue('');\n    setWifiName('');\n    setWifiPassword('');\n    setWifiEncryption('WPA');\n    setWifiHidden(false);\n    setContactName('');\n    setContactEmail('');\n    setContactPhone('');\n    setContactAddress('');\n    setQrImageData('');\n    setScanResult('');\n    setErrorMessage('');\n    setCopied(false);\n    setSelectedFile(null);\n  };\n\n  // Format QR value based on type\n  const formatQrValue = () => {\n    switch (qrType) {\n      case 'wifi':\n        // Format: WIFI:S:<SSID>;T:<WPA|WEP|>;P:<password>;H:<true|false>;;\n        return `WIFI:S:${wifiName};T:${wifiEncryption};P:${wifiPassword};H:${wifiHidden ? 'true' : 'false'};;`;\n      case 'contact':\n        // Format vCard\n        let vCard = 'BEGIN:VCARD\\nVERSION:3.0\\n';\n        if (contactName) vCard += `FN:${contactName}\\n`;\n        if (contactEmail) vCard += `EMAIL:${contactEmail}\\n`;\n        if (contactPhone) vCard += `TEL:${contactPhone}\\n`;\n        if (contactAddress) vCard += `ADR:;;${contactAddress};;;;\\n`;\n        vCard += 'END:VCARD';\n        return vCard;\n      default:\n        return qrValue;\n    }\n  };\n\n  // Add a handleTabClick function to update the URL hash\n  const handleTabClick = (tab) => {\n    if (tab !== activeTab) {\n      if (isScanning) {\n        stopScanner();\n      }\n      setActiveTab(tab);\n      clearAll();\n      window.history.replaceState(null, null, `#${tab}`);\n    }\n  };\n\n  // Read hash from URL on component mount\n  useEffect(() => {\n    const hash = window.location.hash.substring(1);\n    if (hash === 'generate' || hash === 'scan') {\n      setActiveTab(hash);\n    }\n  }, []);\n\n  // Generate QR code\n  const generateQrCode = async () => {\n    setErrorMessage('');\n    setIsGenerating(true);\n\n    try {\n      // Validate inputs based on type\n      if (qrType === 'url' && !qrValue) {\n        throw new Error('Please enter a URL');\n      } else if (qrType === 'text' && !qrValue) {\n        throw new Error('Please enter some text');\n      } else if (qrType === 'wifi' && !wifiName) {\n        throw new Error('Please enter the Wi-Fi name (SSID)');\n      } else if (qrType === 'contact' && !(contactName || contactEmail || contactPhone)) {\n        throw new Error('Please enter at least one contact detail');\n      }\n\n      // Get formatted value\n      const value = formatQrValue();\n\n      // Generate QR code using qrcode.js library\n      const options = {\n        errorCorrectionLevel: 'H',\n        type: 'image/png',\n        quality: 0.92,\n        margin: 1,\n        color: {\n          dark: qrColor,\n          light: qrBgColor\n        },\n        width: qrSize\n      };\n\n      // Generate QR code as data URL\n      const dataUrl = await QRCode.toDataURL(value, options);\n\n      // Set the image data\n      setQrImageData(dataUrl);\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n      setErrorMessage(error.message || 'Error generating QR code');\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  // Start camera scanner using Html5Qrcode\n  const startScanner = async () => {\n    setScanResult('');\n    setErrorMessage('');\n    setIsScanning(true);\n    setScanWithCamera(true);\n\n    try {\n      if (!Html5Qrcode) {\n        throw new Error('QR code scanner library not loaded');\n      }\n\n      // Ensure the scanner div exists before continuing\n      setTimeout(() => {\n        try {\n          // Don't use a direct HTML ID lookup - use the ref\n          if (!scannerDivRef.current) {\n            throw new Error('Scanner container not available');\n          }\n\n          // Create a new instance of Html5Qrcode\n          const html5QrCode = new Html5Qrcode(scannerDivRef.current.id);\n          html5QrCodeRef.current = html5QrCode;\n\n          // Config for QR code scanning\n          // Config for QR code scanning\n          const config = {\n            fps: 10,\n            qrbox: { width: 250, height: 250 },\n            aspectRatio: 1.0,\n            // Replace with correct format reference\n            formatsToSupport: [Html5QrcodeScanType.QR_CODE]\n          };\n\n          // Success callback when QR code is detected\n          const qrCodeSuccessCallback = (decodedText, decodedResult) => {\n            console.log(`QR Code detected: ${decodedText}`, decodedResult);\n            setScanResult(decodedText);\n            stopScanner();\n          };\n\n          // Start scanning\n          html5QrCode.start(\n            { facingMode: \"environment\" },\n            config,\n            qrCodeSuccessCallback,\n            (errorMessage) => {\n              // This is a non-blocking error, we'll just log it and continue scanning\n              console.log(\"QR Code scanning error:\", errorMessage);\n            }\n          ).catch(err => {\n            console.error(\"Error starting camera:\", err);\n            setErrorMessage(`Error starting camera: ${err.message}`);\n            setIsScanning(false);\n          });\n\n          // Set a timeout to stop scanning after 15 seconds if no QR code is detected\n          setTimeout(() => {\n            if (isScanning && html5QrCodeRef.current) {\n              setErrorMessage(\"Scanning timed out after 15 seconds. Please try again or use the file upload option.\");\n              stopScanner();\n            }\n          }, 15000);\n        } catch (error) {\n          console.error('Error starting QR code scanner:', error);\n          setIsScanning(false);\n          setScanWithCamera(false);\n          setErrorMessage(error.message || 'Error starting QR code scanner');\n        }\n      }, 500); // Small delay to ensure DOM is ready\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      setIsScanning(false);\n      setScanWithCamera(false);\n      setErrorMessage(error.message || 'Error accessing camera');\n    }\n  };\n\n  // Stop the scanner\n  const stopScanner = () => {\n    console.log(\"Stopping scanner\");\n    if (html5QrCodeRef.current) {\n      if (html5QrCodeRef.current.isScanning) {\n        html5QrCodeRef.current.stop()\n          .then(() => {\n            console.log('QR Code scanning stopped');\n            setIsScanning(false);\n            setScanWithCamera(false);\n          })\n          .catch(err => {\n            console.error('Error stopping QR Code scanner:', err);\n            // Force state update even if there's an error\n            setIsScanning(false);\n            setScanWithCamera(false);\n          });\n      } else {\n        setIsScanning(false);\n        setScanWithCamera(false);\n      }\n    } else {\n      setIsScanning(false);\n      setScanWithCamera(false);\n    }\n  };\n\n  // Handle file upload for QR code scanning\n  const handleFileUpload = (event) => {\n    setScanResult('');\n    setErrorMessage('');\n\n    const file = event.target.files[0];\n    if (!file) return;\n\n    setSelectedFile(file);\n\n    // Create a file reader to read the image\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      // Once the file is loaded, create or get an html5QrCode instance\n      let html5QrCode;\n\n      if (html5QrCodeRef.current) {\n        html5QrCode = html5QrCodeRef.current;\n      } else {\n        // Create a new instance if one doesn't exist yet\n        html5QrCode = new Html5Qrcode(\"qr-reader-file\");\n        html5QrCodeRef.current = html5QrCode;\n      }\n\n      // We need to provide the file directly to the scanFile method\n      html5QrCode.scanFile(file, true)\n        .then(decodedText => {\n          // Success - we found a QR code\n          console.log(\"QR Code detected from file:\", decodedText);\n          setScanResult(decodedText);\n        })\n        .catch(err => {\n          // Error - no QR code found\n          console.error(\"Error scanning file:\", err);\n          setErrorMessage('No QR code found in the image or the image could not be processed');\n        });\n    };\n\n    reader.onerror = () => {\n      setErrorMessage('Error reading the file');\n    };\n\n    // Start reading the file\n    reader.readAsDataURL(file);\n  };\n\n  // Copy scan result to clipboard\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(scanResult)\n      .then(() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      })\n      .catch(err => {\n        console.error('Failed to copy text: ', err);\n        setErrorMessage('Failed to copy to clipboard');\n      });\n  };\n\n  // Download QR code\n  const downloadQrCode = () => {\n    if (!qrImageData) return;\n\n    const link = document.createElement('a');\n    link.href = qrImageData;\n    link.download = `qrcode-${Date.now()}.png`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      if (html5QrCodeRef.current && html5QrCodeRef.current.isScanning) {\n        html5QrCodeRef.current.stop()\n          .then(() => {\n            console.log('QR Code scanner successfully stopped on component unmount');\n          })\n          .catch(err => {\n            console.error('Error stopping QR Code scanner:', err);\n          });\n      }\n    };\n  }, []);\n\n  // Create the description element for the Layout\n  const descriptionElement = (\n    <div className=\"info-banner\">\n      <div className=\"info-icon\">\n        <Info size={20} />\n      </div>\n      <div className=\"info-content\">\n        Create and scan QR codes instantly. Generate QR codes for URLs, text, Wi-Fi credentials, and contact information.\n        All processing happens in your browser - no data is sent to servers.\n      </div>\n    </div>\n  );\n\n  // Return the component using the Layout\n  return (\n    <Layout\n      title=\"QR Code Generator & Scanner\"\n      description={descriptionElement}\n    >\n\n      <div className=\"tab-container\">\n        <button\n          className={`tab-button ${activeTab === 'generate' ? 'active' : ''}`}\n          onClick={() => handleTabClick('generate')}\n        >\n          <QrCode size={18} />\n          Generate QR Code\n        </button>\n        <button\n          className={`tab-button ${activeTab === 'scan' ? 'active' : ''}`}\n          onClick={() => handleTabClick('scan')}\n        >\n          <Scan size={18} />\n          Scan QR Code\n        </button>\n      </div>\n\n      <div className=\"qr-container\">\n        {activeTab === 'generate' ? (\n          // QR Code Generator\n          <div className=\"generator-section\">\n            <div className=\"qr-code-type\">\n              <h3>QR Code Type:</h3>\n              <div className=\"type-buttons\">\n                {qrTypes.map(type => (\n                  <button\n                    key={type.id}\n                    className={`type-button ${qrType === type.id ? 'active' : ''}`}\n                    onClick={() => {\n                      setQrType(type.id);\n                      clearAll();\n                    }}\n                  >\n                    {type.icon}\n                    <span>{type.label}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"form-section\">\n              {qrType === 'url' && (\n                <div className=\"input-group\">\n                  <label htmlFor=\"url-input\">URL:</label>\n                  <input\n                    id=\"url-input\"\n                    type=\"url\"\n                    value={qrValue}\n                    onChange={(e) => setQrValue(e.target.value)}\n                    placeholder=\"https://example.com\"\n                    className=\"text-input\"\n                  />\n                </div>\n              )}\n\n              {qrType === 'text' && (\n                <div className=\"input-group\">\n                  <label htmlFor=\"text-input\">Text:</label>\n                  <textarea\n                    id=\"text-input\"\n                    value={qrValue}\n                    onChange={(e) => setQrValue(e.target.value)}\n                    placeholder=\"Enter your text here\"\n                    className=\"textarea-input\"\n                    rows=\"4\"\n                  />\n                </div>\n              )}\n\n              {qrType === 'wifi' && (\n                <>\n                  <div className=\"input-group\">\n                    <label htmlFor=\"wifi-name\">Network Name (SSID):</label>\n                    <input\n                      id=\"wifi-name\"\n                      type=\"text\"\n                      value={wifiName}\n                      onChange={(e) => setWifiName(e.target.value)}\n                      placeholder=\"Enter WiFi name\"\n                      className=\"text-input\"\n                    />\n                  </div>\n\n                  <div className=\"input-group\">\n                    <label htmlFor=\"wifi-password\">Password:</label>\n                    <input\n                      id=\"wifi-password\"\n                      type=\"password\"\n                      value={wifiPassword}\n                      onChange={(e) => setWifiPassword(e.target.value)}\n                      placeholder=\"Enter WiFi password\"\n                      className=\"text-input\"\n                    />\n                  </div>\n\n                  <div className=\"input-row\">\n                    <div className=\"input-group half-width\">\n                      <label htmlFor=\"wifi-encryption\">Encryption:</label>\n                      <select\n                        id=\"wifi-encryption\"\n                        value={wifiEncryption}\n                        onChange={(e) => setWifiEncryption(e.target.value)}\n                        className=\"select-input\"\n                      >\n                        <option value=\"WPA\">WPA/WPA2</option>\n                        <option value=\"WEP\">WEP</option>\n                        <option value=\"\">None</option>\n                      </select>\n                    </div>\n\n                    <div className=\"input-group half-width checkbox-group\">\n                      <label htmlFor=\"wifi-hidden\" className=\"checkbox-label\">\n                        <input\n                          id=\"wifi-hidden\"\n                          type=\"checkbox\"\n                          checked={wifiHidden}\n                          onChange={(e) => setWifiHidden(e.target.checked)}\n                          className=\"checkbox-input\"\n                        />\n                        <span>Hidden Network</span>\n                      </label>\n                    </div>\n                  </div>\n                </>\n              )}\n\n              {qrType === 'contact' && (\n                <>\n                  <div className=\"input-group\">\n                    <label htmlFor=\"contact-name\">Name:</label>\n                    <input\n                      id=\"contact-name\"\n                      type=\"text\"\n                      value={contactName}\n                      onChange={(e) => setContactName(e.target.value)}\n                      placeholder=\"Full Name\"\n                      className=\"text-input\"\n                    />\n                  </div>\n\n                  <div className=\"input-group\">\n                    <label htmlFor=\"contact-email\">Email:</label>\n                    <input\n                      id=\"contact-email\"\n                      type=\"email\"\n                      value={contactEmail}\n                      onChange={(e) => setContactEmail(e.target.value)}\n                      placeholder=\"email@example.com\"\n                      className=\"text-input\"\n                    />\n                  </div>\n\n                  <div className=\"input-group\">\n                    <label htmlFor=\"contact-phone\">Phone:</label>\n                    <input\n                      id=\"contact-phone\"\n                      type=\"tel\"\n                      value={contactPhone}\n                      onChange={(e) => setContactPhone(e.target.value)}\n                      placeholder=\"+1 (123) 456-7890\"\n                      className=\"text-input\"\n                    />\n                  </div>\n\n                  <div className=\"input-group\">\n                    <label htmlFor=\"contact-address\">Address:</label>\n                    <textarea\n                      id=\"contact-address\"\n                      value={contactAddress}\n                      onChange={(e) => setContactAddress(e.target.value)}\n                      placeholder=\"Street, City, State, ZIP\"\n                      className=\"textarea-input\"\n                      rows=\"2\"\n                    />\n                  </div>\n                </>\n              )}\n\n              <div className=\"advanced-options-toggle\" onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}>\n                <Settings size={16} />\n                <span>{showAdvancedOptions ? 'Hide Advanced Options' : 'Show Advanced Options'}</span>\n              </div>\n\n              {showAdvancedOptions && (\n                <div className=\"advanced-options\">\n                  <div className=\"input-row\">\n                    <div className=\"input-group half-width\">\n                      <label htmlFor=\"qr-color\">QR Color:</label>\n                      <div className=\"color-input-container\">\n                        <input\n                          id=\"qr-color\"\n                          type=\"color\"\n                          value={qrColor}\n                          onChange={(e) => setQrColor(e.target.value)}\n                          className=\"color-input\"\n                        />\n                        <span className=\"color-value\">{qrColor}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"input-group half-width\">\n                      <label htmlFor=\"qr-bg-color\">Background:</label>\n                      <div className=\"color-input-container\">\n                        <input\n                          id=\"qr-bg-color\"\n                          type=\"color\"\n                          value={qrBgColor}\n                          onChange={(e) => setQrBgColor(e.target.value)}\n                          className=\"color-input\"\n                        />\n                        <span className=\"color-value\">{qrBgColor}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"input-group\">\n                    <label htmlFor=\"qr-size\">Size: {qrSize}px</label>\n                    <input\n                      id=\"qr-size\"\n                      type=\"range\"\n                      min=\"100\"\n                      max=\"500\"\n                      step=\"50\"\n                      value={qrSize}\n                      onChange={(e) => setQrSize(Number(e.target.value))}\n                      className=\"range-input\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              <div className=\"button-group\">\n                <button\n                  onClick={generateQrCode}\n                  disabled={isGenerating}\n                  className=\"generate-button\"\n                >\n                  {isGenerating ? (\n                    <>\n                      <RefreshCw size={18} className=\"spinner\" />\n                      <span>Generating...</span>\n                    </>\n                  ) : (\n                    <>\n                      <QrCode size={18} />\n                      <span>Generate QR Code</span>\n                    </>\n                  )}\n                </button>\n\n                <button onClick={clearAll} className=\"reset-button\">\n                  <RefreshCw size={18} />\n                  <span>Reset</span>\n                </button>\n              </div>\n\n              {errorMessage && (\n                <div className=\"error-message\">\n                  {errorMessage}\n                </div>\n              )}\n            </div>\n\n            {qrImageData && (\n              <div className=\"qr-result\">\n                <div className=\"qr-image-container\">\n                  <img src={qrImageData} alt=\"Generated QR Code\" className=\"qr-image\" />\n                </div>\n\n                <div className=\"qr-actions\">\n                  <button onClick={downloadQrCode} className=\"qr-action-button\">\n                    <Download size={18} />\n                    <span>Download</span>\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          // QR Code Scanner\n          <div className=\"scanner-section\">\n            <div className=\"scan-options-container\">\n              <div className=\"camera-option\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={scanWithCamera}\n                    onChange={() => setScanWithCamera(!scanWithCamera)}\n                  />\n                  Scan with Camera\n                </label>\n              </div>\n\n              {scanWithCamera && (\n                <button\n                  onClick={scanWithCamera ? (isScanning ? stopScanner : startScanner) : null}\n                  className=\"generate-button\"\n                >\n                  {isScanning ? (\n                    <>\n                      <RefreshCw size={18} className=\"spinner\" />\n                      <span>Scanning...</span>\n                    </>\n                  ) : (\n                    <>\n                      <Smartphone size={18} />\n                      <span>Start Camera</span>\n                    </>\n                  )}\n                </button>\n              )}\n\n              <div className=\"or-divider\">OR</div>\n\n              <div className=\"file-upload-container\">\n                <div className=\"custom-file-upload\">\n                  <label className=\"file-upload-button\">\n                    Upload QR Image\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleFileUpload}\n                      style={{ display: 'none' }}\n                    />\n                  </label>\n                  <span className=\"file-name-display\">\n                    {selectedFile ? selectedFile.name : 'no file selected'}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* HTML5 QR Code Scanner Container */}\n            {scanWithCamera && isScanning && (\n              <div\n                id=\"qr-reader\"\n                ref={(el) => {\n                  scannerDivRef.current = el;\n                  // Ensure the element has an ID\n                  if (el) el.id = \"qr-reader\";\n                }}\n                style={{ width: '100%', maxWidth: '500px', margin: '0 auto' }}\n              ></div>\n            )}\n\n            {/* Hidden element for file scanning */}\n            <div\n              id=\"qr-reader-file\"\n              ref={(el) => {\n                if (el) {\n                  // Ensure the element has the correct ID\n                  el.id = \"qr-reader-file\";\n                }\n              }}\n              style={{ display: 'none' }}\n            ></div>\n\n            {scanResult && (\n              <div className=\"scan-result\">\n                <h3>Scan Result:</h3>\n                <div className=\"scan-content\">\n                  {scanResult}\n                </div>\n\n                <div className=\"scan-actions\">\n                  <button onClick={copyToClipboard} className=\"qr-action-button\">\n                    {copied ? (\n                      <>\n                        <Check size={18} />\n                        <span>Copied!</span>\n                      </>\n                    ) : (\n                      <>\n                        <Copy size={18} />\n                        <span>Copy</span>\n                      </>\n                    )}\n                  </button>\n\n                  {scanResult.startsWith('http') && (\n                    <a\n                      href={scanResult}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"qr-action-button\"\n                    >\n                      <LinkIcon size={18} />\n                      <span>Open Link</span>\n                    </a>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {errorMessage && (\n              <div className=\"error-message\">\n                {errorMessage}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </Layout>\n  );\n}\n\nexport default QrCodeTool;"],"names":["QrCodeTool","qrTypes","jsx","LinkIcon","QrCode","Wifi","User","qrType","setQrType","useState","qrValue","setQrValue","qrColor","setQrColor","qrBgColor","setQrBgColor","qrSize","setQrSize","qrImageData","setQrImageData","activeTab","setActiveTab","scanResult","setScanResult","copied","setCopied","showAdvancedOptions","setShowAdvancedOptions","isGenerating","setIsGenerating","isScanning","setIsScanning","errorMessage","setErrorMessage","scanWithCamera","setScanWithCamera","selectedFile","setSelectedFile","wifiName","setWifiName","wifiPassword","setWifiPassword","wifiEncryption","setWifiEncryption","wifiHidden","setWifiHidden","contactName","setContactName","contactEmail","setContactEmail","contactPhone","setContactPhone","contactAddress","setContactAddress","useRef","scannerDivRef","html5QrCodeRef","clearAll","formatQrValue","vCard","handleTabClick","tab","stopScanner","useEffect","hash","generateQrCode","value","options","dataUrl","QRCode","error","startScanner","Html5Qrcode","html5QrCode","config","Html5QrcodeScanType","qrCodeSuccessCallback","decodedText","decodedResult","err","handleFileUpload","event","file","reader","e","copyToClipboard","downloadQrCode","link","descriptionElement","jsxs","Info","Layout","Scan","type","Fragment","Settings","RefreshCw","Download","Smartphone","el","Check","Copy"],"mappings":"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"}