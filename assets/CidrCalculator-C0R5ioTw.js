import{j as s}from"./index-D62iepav.js";import{L as gs}from"./Layout-7YO7GSX_.js";import{r}from"./react-vendor-CjoZ0FnW.js";import{j as T,k as V,N as cs,l as os,R as us,c as ds,h as ms,m as fs,n as ws,o as ks,T as ys,e as bs}from"./ui-Bjy91_IB.js";function Ms(){const[I,W]=r.useState("calculator"),[S,G]=r.useState(""),[P,J]=r.useState(""),[a,D]=r.useState(null),[K,g]=r.useState(""),[O,R]=r.useState(!1),[E,hs]=r.useState(!1),[Q,f]=r.useState(!1),[z,X]=r.useState(""),[$,Y]=r.useState(""),[i,Z]=r.useState("count"),[b,_]=r.useState(""),[x,ss]=r.useState(""),[n,U]=r.useState(null),[es,o]=r.useState(""),[ts,u]=r.useState(!1),as=e=>/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(e),ps=e=>{const t=parseInt(e,10);return!isNaN(t)&&t>=0&&t<=32},ns=e=>e.split(".").map(t=>parseInt(t,10).toString(2).padStart(8,"0")).join(""),w=e=>{const t=[];for(let l=0;l<32;l+=8)t.push(parseInt(e.substr(l,8),2));return t.join(".")},ls=(e,t,l)=>{if(t==="count"){const c=parseInt(l,10),d=Math.ceil(Math.log2(c));return e+d}else{const c=parseInt(l,10);return 32-Math.ceil(Math.log2(c+2))}},xs=()=>{if(f(!0),g(""),D(null),R(!1),!S||!P){g("Please enter both IP address and CIDR prefix."),f(!1);return}if(!as(S)){g("Invalid IP address format. Please enter a valid IPv4 address (e.g., 192.168.1.1)."),f(!1);return}const e=parseInt(P,10);if(isNaN(e)||e<0||e>32){g("Invalid CIDR prefix. Must be a number between 0 and 32."),f(!1);return}const t=e===31?"Note: /31 networks are used for point-to-point links (RFC 3021) with 2 usable IPs.":e===32?"Note: /32 is a host route with a single usable IP address.":"",l=ns(S),c=parseInt(P,10),d="1".repeat(c).padEnd(32,"0"),A=l.substring(0,c).padEnd(32,"0"),q=l.substring(0,c).padEnd(32,"1"),B=w(d),k=w(A),m=w(q),h=Math.pow(2,32-c);let j=k,N=m;if(h>2){const p=k.split(".");p[3]=parseInt(p[3],10)+1,j=p.join(".");const H=m.split(".");H[3]=parseInt(H[3],10)-1,N=H.join(".")}let v=h-2;v<0&&(v=0);const y=`${j} - ${N}`,L=B.split(".").map(p=>255-parseInt(p,10)).join("."),C={networkAddress:k,broadcastAddress:m,subnetMask:B,wildcardMask:L,cidrNotation:`/${c}`,totalIPs:h,usableHosts:v,ipRange:y,firstUsableIp:j,lastUsableIp:N,binarySubnetMask:d.match(/.{1,8}/g).join("."),binaryIp:l.match(/.{1,8}/g).join(".")};t&&(C.specialNote=t),setTimeout(()=>{D(C),f(!1)},600)},js=()=>{if(u(!0),o(""),U(null),!z||!$){o("Please enter both base network address and CIDR prefix."),u(!1);return}if(!as(z)){o("Invalid network address format. Please enter a valid IPv4 address."),u(!1);return}if(!ps($)){o("Invalid CIDR prefix. Must be a number between 0 and 32."),u(!1);return}const e=parseInt($,10);if(i==="count"&&(!b||isNaN(parseInt(b,10))||parseInt(b,10)<=0)){o("Please enter a valid number of subnets (must be greater than 0)."),u(!1);return}if(i==="size"&&(!x||isNaN(parseInt(x,10))||parseInt(x,10)<=0)){o("Please enter a valid subnet size (must be greater than 0)."),u(!1);return}try{let t,l;if(i==="count"){if(t=ls(e,"count",b),l=Math.pow(2,t-e),t>30){o(`Creating ${b} subnets would result in a CIDR prefix larger than /30, which is too small for practical use.`),u(!1);return}}else if(t=ls(e,"size",x),l=Math.pow(2,t-e),t<e){o("The requested subnet size is larger than the base network. Please use a smaller subnet size."),u(!1);return}const c=ns(z).substring(0,e).padEnd(32,"0"),d=w(c),A=[],q=Math.pow(2,32-t),B=vs(d);for(let m=0;m<l;m++){const h=B+m*q,j=M(h),N=h+q-1,v=M(N);let y=j,F=v;t<31&&(y=M(h+1),F=M(N-1));const L=Ns(t),C=Math.pow(2,32-t),p=t>=31?C:C-2;A.push({name:`Subnet ${m+1}`,network:j,broadcast:v,cidr:`/${t}`,subnetMask:L,totalIPs:C,usableHosts:p,firstUsable:y,lastUsable:F,ipRange:`${y} - ${F}`})}const k={baseNetwork:d,baseCidr:`/${e}`,newCidr:`/${t}`,subnetCount:l,requestedSubnetCount:i==="count"?parseInt(b,10):null,requestedSubnetSize:i==="size"?parseInt(x,10):null,subnets:A};setTimeout(()=>{U(k),u(!1)},600)}catch(t){console.error("Error creating subnets:",t),o(`An error occurred: ${t.message||"Unknown error"}`),u(!1)}},Ns=e=>{const t="1".repeat(e).padEnd(32,"0");return w(t)},vs=e=>{const t=e.split(".");return parseInt(t[0],10)<<24|parseInt(t[1],10)<<16|parseInt(t[2],10)<<8|parseInt(t[3],10)},M=e=>[e>>>24&255,e>>>16&255,e>>>8&255,e&255].join("."),rs=()=>{I==="calculator"?(G(""),J(""),D(null),g(""),R(!1)):(X(""),Y(""),_(""),ss(""),U(null),o(""))},is=e=>{e&&navigator.clipboard.writeText(e).then(()=>{R(!0),setTimeout(()=>R(!1),2e3)}).catch(t=>{console.error("Failed to copy text: ",t)})},Cs=()=>{if(!a)return;const e=`
CIDR Calculation Results:
IP Address: ${S}${a.cidrNotation}
Network Address: ${a.networkAddress}
Broadcast Address: ${a.broadcastAddress}
Subnet Mask: ${a.subnetMask}
Wildcard Mask: ${a.wildcardMask}
Total IPs: ${a.totalIPs.toLocaleString()}
Usable Hosts: ${a.usableHosts.toLocaleString()}
IP Range: ${a.ipRange}
    `.trim();is(e)},Is=()=>{if(!n)return;let e=`
Base Network: ${n.baseNetwork}${n.baseCidr}
Subnet CIDR: ${n.newCidr}
Number of Subnets: ${n.subnetCount}
`;n.requestedSubnetCount&&(e+=`Requested Subnet Count: ${n.requestedSubnetCount}
`),n.requestedSubnetSize&&(e+=`Requested Subnet Size: ${n.requestedSubnetSize} IPs
`),e+=`
Subnet Details:
`,n.subnets.forEach((t,l)=>{e+=`
Subnet ${l+1}:
  Network: ${t.network}${t.cidr}
  Broadcast: ${t.broadcast}
  Subnet Mask: ${t.subnetMask}
  Total IPs: ${t.totalIPs}
  Usable Hosts: ${t.usableHosts}
  IP Range: ${t.ipRange}
`}),is(e.trim())},Ss=s.jsxs("div",{className:"info-box",children:[s.jsx(bs,{size:20}),s.jsx("p",{children:"Calculate subnet information or create subnet allocations similar to AWS VPC. All calculations are performed locally in your browser."})]});return s.jsxs(gs,{title:"CIDR Subnet Calculator",description:Ss,children:[s.jsxs("div",{className:"tab-container",children:[s.jsxs("button",{className:`tab-button ${I==="calculator"?"active":""}`,onClick:()=>W("calculator"),children:[s.jsx(T,{size:18}),"CIDR Calculator"]}),s.jsxs("button",{className:`tab-button ${I==="subnet-creator"?"active":""}`,onClick:()=>W("subnet-creator"),children:[s.jsx(V,{size:18}),"Subnet Creator"]})]}),s.jsxs("div",{className:"calculator-container",children:[I==="calculator"&&s.jsxs(s.Fragment,{children:[s.jsxs("div",{className:"input-section",children:[s.jsxs("div",{className:"input-group",children:[s.jsx("label",{htmlFor:"ip-address",children:"IP Address"}),s.jsxs("div",{className:"input-with-icon",children:[s.jsx(cs,{size:18,className:"input-icon"}),s.jsx("input",{id:"ip-address",type:"text",value:S,onChange:e=>G(e.target.value),placeholder:"e.g., 192.168.1.1",className:"text-input"})]})]}),s.jsxs("div",{className:"input-group",children:[s.jsx("label",{htmlFor:"cidr-prefix",children:"CIDR Prefix"}),s.jsxs("div",{className:"input-with-icon",children:[s.jsx(T,{size:18,className:"input-icon"}),s.jsx("input",{id:"cidr-prefix",type:"text",value:P,onChange:e=>J(e.target.value),placeholder:"e.g., 24",className:"text-input"})]})]}),s.jsxs("div",{className:"button-group",children:[s.jsx("button",{onClick:xs,disabled:Q,className:"calculate-button",children:Q?s.jsxs(s.Fragment,{children:[s.jsx(os,{size:18,className:"spinner"}),s.jsx("span",{children:"Calculating..."})]}):s.jsxs(s.Fragment,{children:[s.jsx(T,{size:18}),s.jsx("span",{children:"Calculate"})]})}),s.jsxs("button",{onClick:rs,className:"reset-button",children:[s.jsx(us,{size:18}),s.jsx("span",{children:"Reset"})]})]}),K&&s.jsx("div",{className:"error-message",children:K})]}),a&&s.jsxs("div",{className:"result-section",children:[s.jsxs("div",{className:"result-header",children:[s.jsx("h3",{children:"Calculation Results"}),s.jsx("button",{onClick:Cs,className:"copy-button",children:O?s.jsxs(s.Fragment,{children:[s.jsx(ds,{size:18}),s.jsx("span",{children:"Copied!"})]}):s.jsxs(s.Fragment,{children:[s.jsx(ms,{size:18}),s.jsx("span",{children:"Copy Results"})]})})]}),s.jsxs("div",{className:"result-grid",children:[s.jsxs("div",{className:"result-item",children:[s.jsx("span",{className:"result-label",children:"Network Address:"}),s.jsx("span",{className:"result-value",children:a.networkAddress})]}),s.jsxs("div",{className:"result-item",children:[s.jsx("span",{className:"result-label",children:"Broadcast Address:"}),s.jsx("span",{className:"result-value",children:a.broadcastAddress})]}),s.jsxs("div",{className:"result-item",children:[s.jsx("span",{className:"result-label",children:"Subnet Mask:"}),s.jsx("span",{className:"result-value",children:a.subnetMask})]}),s.jsxs("div",{className:"result-item",children:[s.jsx("span",{className:"result-label",children:"CIDR Notation:"}),s.jsx("span",{className:"result-value",children:a.cidrNotation})]}),s.jsxs("div",{className:"result-item",children:[s.jsx("span",{className:"result-label",children:"Total IPs:"}),s.jsx("span",{className:"result-value",children:a.totalIPs.toLocaleString()})]}),s.jsxs("div",{className:"result-item",children:[s.jsx("span",{className:"result-label",children:"Usable Hosts:"}),s.jsx("span",{className:"result-value",children:a.usableHosts.toLocaleString()})]}),s.jsxs("div",{className:"result-item full-width",children:[s.jsx("span",{className:"result-label",children:"IP Range:"}),s.jsx("span",{className:"result-value",children:a.ipRange})]}),s.jsxs("div",{className:"advanced-toggle",onClick:()=>hs(!E),children:[E?s.jsx(fs,{size:18}):s.jsx(ws,{size:18}),s.jsx("span",{children:"Advanced Details"})]}),E&&s.jsxs(s.Fragment,{children:[s.jsxs("div",{className:"result-item",children:[s.jsx("span",{className:"result-label",children:"Wildcard Mask:"}),s.jsx("span",{className:"result-value",children:a.wildcardMask})]}),s.jsxs("div",{className:"result-item",children:[s.jsx("span",{className:"result-label",children:"First Usable IP:"}),s.jsx("span",{className:"result-value",children:a.firstUsableIp})]}),s.jsxs("div",{className:"result-item",children:[s.jsx("span",{className:"result-label",children:"Last Usable IP:"}),s.jsx("span",{className:"result-value",children:a.lastUsableIp})]}),s.jsxs("div",{className:"result-item",children:[s.jsx("span",{className:"result-label",children:"IP (Binary):"}),s.jsx("span",{className:"result-value monospace",children:a.binaryIp})]}),s.jsxs("div",{className:"result-item",children:[s.jsx("span",{className:"result-label",children:"Subnet Mask (Binary):"}),s.jsx("span",{className:"result-value monospace",children:a.binarySubnetMask})]})]})]})]})]}),I==="subnet-creator"&&s.jsxs(s.Fragment,{children:[s.jsxs("div",{className:"input-section subnet-creator-section",children:[s.jsxs("div",{className:"subnet-base-inputs",children:[s.jsxs("div",{className:"input-group",children:[s.jsx("label",{htmlFor:"base-network",children:"Base Network Address"}),s.jsxs("div",{className:"input-with-icon",children:[s.jsx(cs,{size:18,className:"input-icon"}),s.jsx("input",{id:"base-network",type:"text",value:z,onChange:e=>X(e.target.value),placeholder:"e.g., 10.0.0.0",className:"text-input"})]})]}),s.jsxs("div",{className:"input-group",children:[s.jsx("label",{htmlFor:"base-cidr",children:"Base CIDR Prefix"}),s.jsxs("div",{className:"input-with-icon",children:[s.jsx(T,{size:18,className:"input-icon"}),s.jsx("input",{id:"base-cidr",type:"text",value:$,onChange:e=>Y(e.target.value),placeholder:"e.g., 16",className:"text-input"})]})]})]}),s.jsxs("div",{className:"subnet-mode-selector",children:[s.jsx("label",{children:"Subnet Creation Mode"}),s.jsxs("div",{className:"radio-group",children:[s.jsxs("label",{className:"radio-label",children:[s.jsx("input",{type:"radio",name:"subnet-mode",checked:i==="count",onChange:()=>Z("count")}),s.jsx("span",{children:"Number of Subnets"})]}),s.jsxs("label",{className:"radio-label",children:[s.jsx("input",{type:"radio",name:"subnet-mode",checked:i==="size",onChange:()=>Z("size")}),s.jsx("span",{children:"Subnet Size (IPs)"})]})]})]}),i==="count"?s.jsxs("div",{className:"input-group",children:[s.jsx("label",{htmlFor:"subnet-count",children:"Number of Subnets"}),s.jsxs("div",{className:"input-with-icon",children:[s.jsx(ks,{size:18,className:"input-icon"}),s.jsx("input",{id:"subnet-count",type:"number",min:"1",value:b,onChange:e=>_(e.target.value),placeholder:"e.g., 4",className:"text-input"})]})]}):s.jsxs("div",{className:"input-group",children:[s.jsx("label",{htmlFor:"subnet-size",children:"IPs per Subnet"}),s.jsxs("div",{className:"input-with-icon",children:[s.jsx(V,{size:18,className:"input-icon"}),s.jsx("input",{id:"subnet-size",type:"number",min:"1",value:x,onChange:e=>ss(e.target.value),placeholder:"e.g., 256",className:"text-input"})]})]}),s.jsxs("div",{className:"subnet-info-note",children:[s.jsx(ys,{size:16}),s.jsx("span",{children:i==="count"?"Subnets will be created with equal sizes based on the number requested.":"Subnets will be created to accommodate at least the requested number of IPs."})]}),s.jsxs("div",{className:"button-group",children:[s.jsx("button",{onClick:js,disabled:ts,className:"calculate-button",children:ts?s.jsxs(s.Fragment,{children:[s.jsx(os,{size:18,className:"spinner"}),s.jsx("span",{children:"Creating Subnets..."})]}):s.jsxs(s.Fragment,{children:[s.jsx(V,{size:18}),s.jsx("span",{children:"Create Subnets"})]})}),s.jsxs("button",{onClick:rs,className:"reset-button",children:[s.jsx(us,{size:18}),s.jsx("span",{children:"Reset"})]})]}),es&&s.jsx("div",{className:"error-message",children:es})]}),n&&s.jsxs("div",{className:"result-section subnet-results-section",children:[s.jsxs("div",{className:"result-header",children:[s.jsx("h3",{children:"Subnet Allocation Results"}),s.jsx("button",{onClick:Is,className:"copy-button",children:O?s.jsxs(s.Fragment,{children:[s.jsx(ds,{size:18}),s.jsx("span",{children:"Copied!"})]}):s.jsxs(s.Fragment,{children:[s.jsx(ms,{size:18}),s.jsx("span",{children:"Copy Results"})]})})]}),s.jsxs("div",{className:"subnet-summary",children:[s.jsxs("div",{className:"summary-item",children:[s.jsx("span",{className:"summary-label",children:"Base Network:"}),s.jsxs("span",{className:"summary-value",children:[n.baseNetwork,n.baseCidr]})]}),s.jsxs("div",{className:"summary-item",children:[s.jsx("span",{className:"summary-label",children:"Subnet CIDR:"}),s.jsx("span",{className:"summary-value",children:n.newCidr})]}),s.jsxs("div",{className:"summary-item",children:[s.jsx("span",{className:"summary-label",children:"Number of Subnets:"}),s.jsx("span",{className:"summary-value",children:n.subnetCount})]}),i==="count"&&n.requestedSubnetCount&&s.jsxs("div",{className:"summary-item",children:[s.jsx("span",{className:"summary-label",children:"Requested Subnets:"}),s.jsx("span",{className:"summary-value",children:n.requestedSubnetCount})]}),i==="size"&&n.requestedSubnetSize&&s.jsxs("div",{className:"summary-item",children:[s.jsx("span",{className:"summary-label",children:"Requested IPs per Subnet:"}),s.jsx("span",{className:"summary-value",children:n.requestedSubnetSize})]})]}),s.jsxs("div",{className:"subnet-list",children:[s.jsx("h4",{children:"Subnet Details"}),s.jsx("div",{className:"subnet-table-container",children:s.jsxs("table",{className:"subnet-table",children:[s.jsx("thead",{children:s.jsxs("tr",{children:[s.jsx("th",{children:"Name"}),s.jsx("th",{children:"Network"}),s.jsx("th",{children:"CIDR"}),s.jsx("th",{children:"Usable IPs"}),s.jsx("th",{children:"IP Range"})]})}),s.jsx("tbody",{children:n.subnets.map((e,t)=>s.jsxs("tr",{children:[s.jsx("td",{children:e.name}),s.jsx("td",{children:e.network}),s.jsx("td",{children:e.cidr}),s.jsx("td",{children:e.usableHosts.toLocaleString()}),s.jsx("td",{className:"ip-range-cell",children:e.ipRange})]},t))})]})}),s.jsxs("div",{className:"subnet-note",children:[s.jsx(bs,{size:16}),s.jsxs("span",{children:["Each subnet has ",n.subnets[0].totalIPs.toLocaleString()," total IPs with"," ",n.subnets[0].usableHosts.toLocaleString()," usable hosts."]})]})]})]})]})]})]})}export{Ms as default};
//# sourceMappingURL=CidrCalculator-C0R5ioTw.js.map
