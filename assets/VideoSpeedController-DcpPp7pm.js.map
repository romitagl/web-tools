{"version":3,"file":"VideoSpeedController-DcpPp7pm.js","sources":["../../src/components/VideoSpeedController.jsx"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport { Upload, PlayCircle, Download, StopCircle, RefreshCw, Info, Settings, Check, AlertCircle } from 'lucide-react';\nimport Layout from './Layout';\n\nfunction VideoSpeedController() {\n  // State variables\n  const [videoFile, setVideoFile] = useState(null);\n  const [videoUrl, setVideoUrl] = useState('');\n  const [playbackSpeed, setPlaybackSpeed] = useState(1.0);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processedVideoUrl, setProcessedVideoUrl] = useState('');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);\n  const [videoQuality, setVideoQuality] = useState('high');\n  const [outputFormat, setOutputFormat] = useState('webm');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [videoInfo, setVideoInfo] = useState(null);\n  const [processingProgress, setProcessingProgress] = useState(0);\n  const [fileKey, setFileKey] = useState(Date.now()); // Key to force input re-render\n  const [gifQuality, setGifQuality] = useState('medium'); // GIF-specific quality setting\n  const [gifWidth, setGifWidth] = useState(640); // Default output width for GIFs\n\n  // Refs\n  const videoRef = useRef(null);\n  const processedVideoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const fileInputRef = useRef(null);\n  const canvasRef = useRef(null);\n  const processingCancelledRef = useRef(false);\n  const gifFramesRef = useRef([]);\n  const gifWorkerRef = useRef(null);\n\n  // Reset state when component unmounts\n  useEffect(() => {\n    return () => {\n      if (videoUrl) URL.revokeObjectURL(videoUrl);\n      if (processedVideoUrl) URL.revokeObjectURL(processedVideoUrl);\n\n      // Clean up any GIF worker if it exists\n      if (gifWorkerRef.current) {\n        gifWorkerRef.current.terminate();\n      }\n    };\n  }, []);\n\n  // Load the GIF.js library dynamically\n  useEffect(() => {\n    // Only load the GIF.js library if it hasn't been loaded yet\n    if (!window.GIF && outputFormat === 'gif') {\n      // Create script element for the main GIF.js library\n      const script = document.createElement('script');\n      script.src = 'https://cdnjs.cloudflare.com/ajax/libs/gif.js/0.2.0/gif.js';\n      script.async = true;\n\n      script.onload = () => {\n        console.log('GIF.js library loaded successfully');\n        // No need to modify defaults - we'll pass all options directly when creating the GIF\n      };\n\n      script.onerror = () => {\n        console.error('Failed to load GIF.js library');\n        setError('Failed to load GIF processing library. Please try a different output format.');\n      };\n\n      document.body.appendChild(script);\n\n      return () => {\n        // Clean up script on unmount if it's still loading\n        document.body.removeChild(script);\n      };\n    }\n  }, [outputFormat]);\n\n  // Function to find a supported MIME type for video recording\n  const getSupportedMimeType = (format = 'webm') => {\n    let possibleTypes = [];\n\n    // Select possible MIME types based on the requested format\n    if (format === 'webm') {\n      possibleTypes = [\n        'video/webm;codecs=vp9',\n        'video/webm;codecs=vp8',\n        'video/webm'\n      ];\n    } else if (format === 'mp4') {\n      possibleTypes = [\n        'video/mp4;codecs=h264',\n        'video/mp4'\n      ];\n    } else {\n      // For GIF format we'll still record as WebM initially\n      possibleTypes = [\n        'video/webm;codecs=vp8',\n        'video/webm'\n      ];\n    }\n\n    // Fallback types for all formats\n    possibleTypes.push('video/webm', 'video/mp4');\n\n    for (const type of possibleTypes) {\n      if (MediaRecorder.isTypeSupported(type)) {\n        console.log(`Using MIME type: ${type}`);\n        return type;\n      }\n    }\n\n    // Fallback to default if no specific types are supported\n    console.log('No specific MIME types supported, using browser default');\n    return '';\n  };\n\n  // Format bytes to human-readable format\n  const formatBytes = (bytes, decimals = 2) => {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n  };\n\n  // Format duration to MM:SS format\n  const formatDuration = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Format current playback time\n  const formatCurrentTime = () => {\n    return `${formatDuration(currentTime)} / ${formatDuration(duration)}`;\n  };\n\n  // Get estimated output duration\n  const getEstimatedDuration = () => {\n    if (!duration) return '00:00';\n    const estimatedDuration = duration / playbackSpeed;\n    return formatDuration(estimatedDuration);\n  };\n\n  // Handle file input change\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    // Reset states\n    setError('');\n    setSuccess('');\n    setProcessedVideoUrl('');\n    if (videoUrl) URL.revokeObjectURL(videoUrl);\n\n    // Check file type\n    if (!file.type.startsWith('video/')) {\n      setError('Please select a valid video file');\n      return;\n    }\n\n    // Check file size (limit to 500MB)\n    if (file.size > 500 * 1024 * 1024) {\n      setError('Video file is too large. Maximum size is 500MB');\n      return;\n    }\n\n    // Set video file and create URL\n    setVideoFile(file);\n    const url = URL.createObjectURL(file);\n    setVideoUrl(url);\n\n    // Log success message\n    console.log(`File loaded successfully: ${file.name} (${file.type}, ${formatBytes(file.size)})`);\n\n    // Get video info when loaded\n    const video = videoRef.current;\n    if (video) {\n      video.onloadedmetadata = () => {\n        setVideoInfo({\n          name: file.name,\n          type: file.type,\n          size: formatBytes(file.size),\n          duration: formatDuration(video.duration),\n          width: video.videoWidth,\n          height: video.videoHeight\n        });\n        setDuration(video.duration);\n\n        // Set a reasonable GIF width based on original video dimensions\n        // but don't go larger than 800px to maintain performance\n        const scaledWidth = Math.min(800, video.videoWidth);\n        setGifWidth(scaledWidth);\n      };\n\n      // Handle video load error\n      video.onerror = (e) => {\n        console.error('Video load error:', e);\n        setError(`There was an error loading this video. It may be in an unsupported format or corrupted.`);\n        setVideoFile(null);\n        setVideoUrl('');\n      };\n    }\n  };\n\n  // Handle video playback\n  const togglePlayPause = () => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    if (isPlaying) {\n      video.pause();\n    } else {\n      video.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  // Update current time during playback\n  const handleTimeUpdate = () => {\n    const video = videoRef.current;\n    if (video) {\n      setCurrentTime(video.currentTime);\n    }\n  };\n\n  // Handle playback speed change\n  const handleSpeedChange = (e) => {\n    setPlaybackSpeed(parseFloat(e.target.value));\n  };\n\n  // Function to delay execution\n  const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n  // Create a GIF from a series of canvas frames\n  const createGifFromFrames = (frames, width, height, frameDelay) => {\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if the GIF.js library exists\n        if (typeof window.GIF !== 'function') {\n          throw new Error(\"GIF.js library not properly loaded. Using fallback method.\");\n        }\n\n        // Determine quality settings based on user selection\n        let gifQualitySettings = {\n          workers: 2, // Use fewer workers to avoid memory issues\n          quality: 10, // Lower is better but slower\n          // Don't specify the worker script - let the library handle it internally\n          width,\n          height\n        };\n\n        if (gifQuality === 'low') {\n          gifQualitySettings.quality = 20;\n          gifQualitySettings.workers = 1;\n        } else if (gifQuality === 'high') {\n          gifQualitySettings.quality = 5;\n          gifQualitySettings.workers = 3;\n        }\n\n        // Create a new GIF\n        const gif = new window.GIF(gifQualitySettings);\n\n        // Add frames to the GIF\n        let framesAdded = 0;\n        const totalFrames = frames.length;\n\n        frames.forEach(frame => {\n          try {\n            gif.addFrame(frame, { delay: frameDelay });\n            framesAdded++;\n            // Update progress as frames are added\n            const addProgress = 60 + ((framesAdded / totalFrames) * 10);\n            setProcessingProgress(Math.min(70, addProgress));\n          } catch (frameError) {\n            console.warn(`Warning: Could not add frame ${framesAdded}`, frameError);\n          }\n        });\n\n        // Add progress handler\n        gif.on('progress', progress => {\n          console.log(`GIF encoding progress: ${Math.round(progress * 100)}%`);\n          // Update progress display (scale from 70-99% to show GIF encoding after frame capture)\n          setProcessingProgress(70 + Math.round(progress * 29));\n        });\n\n        // Set a timeout to detect if processing gets stuck\n        const timeoutId = setTimeout(() => {\n          reject(new Error(\"GIF processing timed out. Using fallback method.\"));\n        }, 30000); // 30 seconds timeout\n\n        // Handle completion\n        gif.on('finished', blob => {\n          clearTimeout(timeoutId); // Clear the timeout\n          resolve(blob);\n        });\n\n        // Start rendering\n        gif.render();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  // Process video with selected speed\n  // Process video with selected speed\n  const processVideo = async () => {\n    const video = videoRef.current;\n    if (!video || !videoFile) {\n      setError('Please upload a video first');\n      return;\n    }\n\n    setError('');\n    setSuccess('');\n    setIsProcessing(true);\n    setProcessingProgress(0);\n    processingCancelledRef.current = false;\n\n    // Clear previous frames reference\n    gifFramesRef.current = [];\n\n    try {\n      // Check for MediaRecorder support with better fallback messaging\n      if (!window.MediaRecorder) {\n        throw new Error('Your browser does not support MediaRecorder. Please try Chrome, Firefox, or Edge.');\n      }\n\n      // Check if canvas.captureStream is supported\n      const testCanvas = document.createElement('canvas');\n      if (!testCanvas.captureStream) {\n        throw new Error('Your browser does not support canvas.captureStream. Please try a different browser like Chrome or Firefox.');\n      }\n\n      // Check memory before starting processing\n      const isMemoryLimited = navigator.deviceMemory && navigator.deviceMemory < 4;\n\n      // Pause the original video if playing\n      video.pause();\n      setIsPlaying(false);\n\n      // Create an offscreen canvas element\n      const canvas = document.createElement('canvas');\n      canvasRef.current = canvas;\n      const ctx = canvas.getContext('2d');\n\n      // Calculate dimensions\n      let targetWidth, targetHeight;\n\n      if (outputFormat === 'gif') {\n        // For GIF, use the user-defined width and calculate height to maintain aspect ratio\n        targetWidth = gifWidth;\n        targetHeight = Math.round(targetWidth * (video.videoHeight / video.videoWidth));\n\n        // For low-memory devices, automatically reduce quality\n        if (isMemoryLimited) {\n          // Automatically reduce quality for low-memory devices\n          setGifQuality('low');\n          setGifWidth(Math.min(400, gifWidth)); // Reduce width to max 400px\n          targetWidth = Math.min(400, gifWidth);\n          targetHeight = Math.round(targetWidth * (video.videoHeight / video.videoWidth));\n\n          setSuccess('Low memory detected. Quality and size reduced for better performance.');\n        }\n\n        // Add size limits based on video length to prevent crashes\n        const videoLength = video.duration;\n        if (videoLength > 30 && gifQuality === 'high') {\n          setSuccess('Note: Long videos with high quality may cause performance issues. Consider using video format instead.');\n        }\n      } else {\n        // For video formats, use original dimensions\n        targetWidth = video.videoWidth;\n        targetHeight = video.videoHeight;\n      }\n\n      // Set canvas dimensions \n      canvas.width = targetWidth;\n      canvas.height = targetHeight;\n\n      // Set quality based on user selection for video formats\n      let videoQualitySettings = {\n        videoBitsPerSecond: 5000000 // 5Mbps for high quality\n      };\n\n      if (videoQuality === 'medium') {\n        videoQualitySettings.videoBitsPerSecond = 2500000; // 2.5Mbps\n      } else if (videoQuality === 'low') {\n        videoQualitySettings.videoBitsPerSecond = 1000000; // 1Mbps\n      }\n\n      // For GIF, we'll handle processing differently\n      if (outputFormat === 'gif') {\n        setSuccess('Preparing to generate GIF...');\n\n        // Set initial time\n        const startTime = 0;\n        const totalDuration = video.duration;\n        video.currentTime = startTime;\n\n        // Calculate frame delays based on playback speed\n        const frameDelay = Math.round(100 / playbackSpeed); // in ms (e.g., 100ms for 1x speed)\n\n        // Determine frame capture rate based on playback speed and quality\n        // More frames = smoother animation but larger file size\n        let frameSkip = 1; // By default, capture every frame\n\n        if (gifQuality === 'low') {\n          frameSkip = 3; // Capture every 3rd frame\n        } else if (gifQuality === 'medium') {\n          frameSkip = 2; // Capture every 2nd frame\n        }\n\n        // For very slow motion, we need more frames\n        if (playbackSpeed < 0.5) {\n          frameSkip = Math.max(1, Math.floor(frameSkip / 2));\n        }\n\n        // Track the frames we've captured\n        let frameCount = 0;\n        let framesProcessed = 0;\n\n        // Process frame by frame\n        const processGifFrame = async () => {\n          if (processingCancelledRef.current) {\n            return;\n          }\n\n          // Draw current video frame to canvas\n          ctx.drawImage(video, 0, 0, targetWidth, targetHeight);\n\n          // Only capture the frame if it's a frame we want (based on frameSkip)\n          if (frameCount % frameSkip === 0) {\n            // Capture this frame\n            const frameImg = document.createElement('img');\n            // We need to clone the canvas to create a snapshot\n            const frameCanvas = document.createElement('canvas');\n            frameCanvas.width = targetWidth;\n            frameCanvas.height = targetHeight;\n            const frameCtx = frameCanvas.getContext('2d');\n            frameCtx.drawImage(canvas, 0, 0);\n\n            // Add this frame to our collection\n            gifFramesRef.current.push(frameCanvas);\n            framesProcessed++;\n          }\n\n          frameCount++;\n\n          // Calculate next frame time based on playback speed\n          // We use a small increment to ensure smooth frame capture\n          const frameDuration = 1 / 30; // Aim for 30fps capture\n          const nextTime = video.currentTime + (frameDuration * playbackSpeed);\n\n          // Update progress (use 60% of the progress bar for frame capture)\n          const progress = (video.currentTime / totalDuration) * 60;\n          setProcessingProgress(Math.min(60, progress));\n\n          // Check if we've reached the end\n          if (nextTime >= totalDuration) {\n            // We've captured all frames, now create the GIF\n            setSuccess(`Creating GIF with ${gifFramesRef.current.length} frames...`);\n            try {\n              // First try with GIF.js\n              try {\n                const gifBlob = await createGifFromFrames(\n                  gifFramesRef.current,\n                  targetWidth,\n                  targetHeight,\n                  frameDelay\n                );\n\n                const gifUrl = URL.createObjectURL(gifBlob);\n                setProcessedVideoUrl(gifUrl);\n                setSuccess(`GIF created successfully! ${gifFramesRef.current.length} frames at ${targetWidth}x${targetHeight}`);\n                setProcessingProgress(100);\n                setIsProcessing(false);\n              } catch (gifError) {\n                console.error('Error creating GIF with GIF.js:', gifError);\n                // Fall back to our manual GIF creation approach\n                setSuccess('Using alternative GIF creation method...');\n\n                // Create an animated canvas as fallback\n                const animatedCanvas = document.createElement('canvas');\n                animatedCanvas.width = targetWidth;\n                animatedCanvas.height = targetHeight;\n                const animCtx = animatedCanvas.getContext('2d');\n\n                // Simulate GIF with a video by using MediaRecorder on a canvas stream\n                const stream = animatedCanvas.captureStream();\n                const alternateRecorder = new MediaRecorder(stream, {\n                  mimeType: getSupportedMimeType('webm'),\n                  videoBitsPerSecond: 2000000 // 2Mbps is good for animated content\n                });\n\n                const animChunks = [];\n                alternateRecorder.ondataavailable = e => {\n                  if (e.data.size > 0) animChunks.push(e.data);\n                };\n\n                alternateRecorder.onstop = () => {\n                  const fallbackBlob = new Blob(animChunks, { type: 'video/webm' });\n                  const fallbackUrl = URL.createObjectURL(fallbackBlob);\n                  setProcessedVideoUrl(fallbackUrl);\n                  setSuccess('Your animation has been created. Due to browser security limitations, it has been saved as a WebM video instead of a GIF. You can convert this video to GIF using desktop software if needed.');\n                  setProcessingProgress(100);\n                  setIsProcessing(false);\n                };\n\n                alternateRecorder.start();\n\n                // Now animate through the frames\n                let frameIndex = 0;\n                const renderFrame = () => {\n                  if (frameIndex >= gifFramesRef.current.length) {\n                    alternateRecorder.stop();\n                    return;\n                  }\n\n                  const frame = gifFramesRef.current[frameIndex];\n                  animCtx.clearRect(0, 0, targetWidth, targetHeight);\n                  animCtx.drawImage(frame, 0, 0);\n                  frameIndex++;\n\n                  // Update progress during animation\n                  const animProgress = 60 + (frameIndex / gifFramesRef.current.length) * 39;\n                  setProcessingProgress(Math.min(99, animProgress));\n\n                  // Schedule next frame\n                  setTimeout(renderFrame, frameDelay);\n                };\n\n                // Start the animation\n                renderFrame();\n              }\n            } catch (finalError) {\n              console.error('All GIF creation methods failed:', finalError);\n              setError(`Could not create animation: ${finalError.message}`);\n              setIsProcessing(false);\n            }\n            return;\n          }\n\n          // Set next frame time\n          video.currentTime = nextTime;\n        };\n\n        // Handle seeking completion for GIF frames\n        video.onseeked = processGifFrame;\n\n        // Start GIF processing\n        processGifFrame();\n\n      } else {\n        // For video formats, use MediaRecorder\n\n        // Create a media stream from the canvas\n        const stream = canvas.captureStream();\n\n        // Create media recorder\n        const mimeType = getSupportedMimeType(outputFormat);\n        mediaRecorderRef.current = new MediaRecorder(stream, {\n          mimeType: mimeType,\n          ...videoQualitySettings\n        });\n\n        // Clear chunks array\n        chunksRef.current = [];\n\n        // Handle data available event\n        mediaRecorderRef.current.ondataavailable = (e) => {\n          if (e.data.size > 0) {\n            chunksRef.current.push(e.data);\n          }\n        };\n\n        // Handle recording stop event\n        mediaRecorderRef.current.onstop = async () => {\n          try {\n            // Determine the correct MIME type for the blob\n            let blobMimeType = 'video/webm';\n            if (outputFormat === 'mp4') {\n              blobMimeType = 'video/mp4';\n            }\n\n            const blob = new Blob(chunksRef.current, { type: blobMimeType });\n            const url = URL.createObjectURL(blob);\n            setProcessedVideoUrl(url);\n            setSuccess('Video processing complete!');\n            setProcessingProgress(100);\n            setIsProcessing(false);\n\n            // Ensure the processed video loads properly\n            if (processedVideoRef.current) {\n              processedVideoRef.current.load();\n            }\n          } catch (error) {\n            console.error('Error processing video output:', error);\n            setError(`Error in final processing: ${error.message}`);\n            setIsProcessing(false);\n          }\n        };\n\n        // Start recording\n        mediaRecorderRef.current.start(100);\n\n        // Set initial time and track progress\n        const startTime = 0;\n        const totalDuration = video.duration;\n        video.currentTime = startTime;\n\n        // Process frame by frame\n        const processFrame = () => {\n          if (!mediaRecorderRef.current || mediaRecorderRef.current.state === 'inactive' || processingCancelledRef.current) {\n            return;\n          }\n\n          // Draw current video frame to canvas\n          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n          // Calculate next frame time based on playback speed\n          const frameRate = 30; // Frames per second\n          const frameDuration = 1 / frameRate;\n          const nextTime = video.currentTime + (frameDuration * playbackSpeed);\n\n          // Update progress\n          const progress = (video.currentTime / totalDuration) * 100;\n          setProcessingProgress(Math.min(99, progress)); // Cap at 99% until we're completely done\n\n          // Check if we've reached the end\n          if (nextTime >= totalDuration) {\n            mediaRecorderRef.current.stop();\n            return;\n          }\n\n          // Set next frame time\n          video.currentTime = nextTime;\n        };\n\n        // Handle seeking completion\n        video.onseeked = processFrame;\n\n        // Start processing\n        processFrame();\n      }\n\n    } catch (err) {\n      // Improved error messaging\n      let errorMsg = err.message;\n\n      // Provide helpful suggestions based on error type\n      if (err.name === 'NotAllowedError') {\n        errorMsg = 'Camera or microphone access denied. Please check your browser permissions.';\n      } else if (err.name === 'NotReadableError') {\n        errorMsg = 'Could not access your camera or microphone. It may be in use by another application.';\n      } else if (err.message.includes('out of memory')) {\n        errorMsg = 'Browser ran out of memory. Try reducing the quality settings or using a shorter video.';\n      }\n\n      console.error('Error processing video:', err);\n      setError(`Processing error: ${errorMsg}`);\n      setIsProcessing(false);\n      // Clean up\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n        mediaRecorderRef.current.stop();\n      }\n    }\n  };\n\n  // Cancel processing\n  const cancelProcessing = () => {\n    processingCancelledRef.current = true;\n\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n\n    // Clear GIF frames to free memory\n    gifFramesRef.current = [];\n\n    setIsProcessing(false);\n    setError('Processing canceled');\n  };\n\n  // Reset everything\n  const resetAll = () => {\n    // Stop any ongoing processing\n    processingCancelledRef.current = true;\n\n    // Revoke existing URLs to free up memory\n    if (videoUrl) URL.revokeObjectURL(videoUrl);\n    if (processedVideoUrl) URL.revokeObjectURL(processedVideoUrl);\n\n    // Clear GIF frames to free memory\n    gifFramesRef.current = [];\n\n    // Reset all state variables\n    setVideoFile(null);\n    setVideoUrl('');\n    setProcessedVideoUrl('');\n    setIsPlaying(false);\n    setDuration(0);\n    setCurrentTime(0);\n    setPlaybackSpeed(1.0);\n    setIsProcessing(false);\n    setError('');\n    setSuccess('');\n    setVideoInfo(null);\n    setProcessingProgress(0);\n\n    // Pause any playing videos\n    if (videoRef.current) {\n      videoRef.current.pause();\n    }\n\n    if (processedVideoRef.current) {\n      processedVideoRef.current.pause();\n    }\n\n    // Reset the file input by changing the key to force re-render\n    setFileKey(Date.now());\n  };\n\n  // Download processed video\n  const downloadVideo = () => {\n    if (!processedVideoUrl) return;\n\n    const a = document.createElement('a');\n    a.href = processedVideoUrl;\n\n    // Create a filename based on original name and speed\n    const speedText = playbackSpeed < 1 ?\n      `slow-${playbackSpeed}x` :\n      `fast-${playbackSpeed}x`;\n\n    const originalName = videoFile.name.split('.').slice(0, -1).join('.');\n\n    // Determine extension - for GIF format, we're actually producing WebM\n    let extension = 'webm'; // Default extension\n\n    // Only use MP4 if that was specifically selected\n    if (outputFormat === 'mp4') {\n      extension = 'mp4';\n    }\n\n    // If user selected GIF, add a note in the filename\n    const formatNote = outputFormat === 'gif' ? '-animation' : '';\n\n    a.download = `${originalName}-${speedText}${formatNote}.${extension}`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  };\n\n  // Description for Layout component\n  const descriptionElement = (\n    <div className=\"info-banner\">\n      <div className=\"info-icon\">\n        <Info size={20} />\n      </div>\n      <div className=\"info-content\">\n        Upload a video and adjust its playback speed to create slow-motion or fast-motion effects. All processing happens locally in your browser - no data is sent to any server.\n      </div>\n    </div>\n  );\n\n  return (\n    <Layout\n      title=\"Video Speed Controller\"\n      description={descriptionElement}\n    >\n      <div className=\"video-speed-container\">\n        {/* File upload section */}\n        <div className=\"upload-section\">\n          <div className=\"input-group\">\n            <label htmlFor=\"video-upload\">Upload Video:</label>\n            <div className=\"file-upload-wrapper\">\n              <label className=\"file-upload-button\" htmlFor={`video-upload-${fileKey}`}>\n                <Upload size={18} />\n                <span>Choose Video File</span>\n              </label>\n              <input\n                id={`video-upload-${fileKey}`}\n                ref={fileInputRef}\n                type=\"file\"\n                onChange={handleFileChange}\n                accept=\"video/*\"\n                disabled={isProcessing}\n                className=\"hidden-file-input\"\n                key={fileKey}\n              />\n              {videoFile && (\n                <div className=\"file-name\">\n                  {videoFile.name}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Video info details */}\n          {videoInfo && (\n            <div className=\"video-info\">\n              <h3>Video Details</h3>\n              <div className=\"info-grid\">\n                <div className=\"info-item\">\n                  <span className=\"info-label\">Duration:</span>\n                  <span className=\"info-value\">{videoInfo.duration}</span>\n                </div>\n                <div className=\"info-item\">\n                  <span className=\"info-label\">Size:</span>\n                  <span className=\"info-value\">{videoInfo.size}</span>\n                </div>\n                <div className=\"info-item\">\n                  <span className=\"info-label\">Dimensions:</span>\n                  <span className=\"info-value\">{videoInfo.width}×{videoInfo.height}</span>\n                </div>\n                <div className=\"info-item\">\n                  <span className=\"info-label\">Type:</span>\n                  <span className=\"info-value\">{videoInfo.type.split('/')[1]}</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Video preview */}\n          {videoUrl && (\n            <div className=\"video-preview\">\n              <h3>Original Video Preview</h3>\n              <div className=\"video-container\">\n                <video\n                  ref={videoRef}\n                  src={videoUrl}\n                  onTimeUpdate={handleTimeUpdate}\n                  onEnded={() => setIsPlaying(false)}\n                  muted\n                />\n\n                <div className=\"video-controls\">\n                  <button\n                    className=\"play-pause-button\"\n                    onClick={togglePlayPause}\n                  >\n                    {isPlaying ? <StopCircle size={20} /> : <PlayCircle size={20} />}\n                    <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                  </button>\n                  <div className=\"time-display\">\n                    {formatCurrentTime()}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Speed control section */}\n          {videoUrl && !isProcessing && !processedVideoUrl && (\n            <div className=\"speed-control-section\">\n              <h3>Playback Speed Control</h3>\n\n              {/* OUTPUT FORMAT SELECTION - Moved outside advanced options */}\n              <div className=\"format-control\">\n                <label>Output Format:</label>\n                <div className=\"format-options\">\n                  <label className=\"radio-label\">\n                    <input\n                      type=\"radio\"\n                      name=\"format\"\n                      value=\"webm\"\n                      checked={outputFormat === 'webm'}\n                      onChange={() => setOutputFormat('webm')}\n                    />\n                    <span>WebM (best quality, most compatible)</span>\n                  </label>\n                  <label className=\"radio-label\">\n                    <input\n                      type=\"radio\"\n                      name=\"format\"\n                      value=\"mp4\"\n                      checked={outputFormat === 'mp4'}\n                      onChange={() => setOutputFormat('mp4')}\n                    />\n                    <span>MP4 (widely supported)</span>\n                  </label>\n                  <label className=\"radio-label\">\n                    <input\n                      type=\"radio\"\n                      name=\"format\"\n                      value=\"gif\"\n                      checked={outputFormat === 'gif'}\n                      onChange={() => setOutputFormat('gif')}\n                    />\n                    <span>GIF (animated image format)</span>\n                  </label>\n                </div>\n              </div>\n\n              <div className=\"speed-slider-container\">\n                <div className=\"speed-slider-labels\">\n                  <span>Slow Motion</span>\n                  <span>Normal</span>\n                  <span>Fast Motion</span>\n                </div>\n                <input\n                  type=\"range\"\n                  min=\"0.25\"\n                  max=\"4\"\n                  step=\"0.25\"\n                  value={playbackSpeed}\n                  onChange={handleSpeedChange}\n                  className=\"speed-slider\"\n                />\n                <div className=\"current-speed\">\n                  <div className=\"speed-badge\">\n                    {playbackSpeed}x speed\n                  </div>\n                  <div className=\"output-duration\">\n                    Estimated output duration: {getEstimatedDuration()}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"preset-speeds\">\n                <button\n                  onClick={() => setPlaybackSpeed(0.25)}\n                  className={`preset-button ${playbackSpeed === 0.25 ? 'active' : ''}`}\n                >\n                  0.25x\n                </button>\n                <button\n                  onClick={() => setPlaybackSpeed(0.5)}\n                  className={`preset-button ${playbackSpeed === 0.5 ? 'active' : ''}`}\n                >\n                  0.5x\n                </button>\n                <button\n                  onClick={() => setPlaybackSpeed(1)}\n                  className={`preset-button ${playbackSpeed === 1 ? 'active' : ''}`}\n                >\n                  1x\n                </button>\n                <button\n                  onClick={() => setPlaybackSpeed(1.5)}\n                  className={`preset-button ${playbackSpeed === 1.5 ? 'active' : ''}`}\n                >\n                  1.5x\n                </button>\n                <button\n                  onClick={() => setPlaybackSpeed(2)}\n                  className={`preset-button ${playbackSpeed === 2 ? 'active' : ''}`}\n                >\n                  2x\n                </button>\n                <button\n                  onClick={() => setPlaybackSpeed(4)}\n                  className={`preset-button ${playbackSpeed === 4 ? 'active' : ''}`}\n                >\n                  4x\n                </button>\n              </div>\n\n              <div className=\"advanced-options-toggle\" onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}>\n                <Settings size={16} />\n                <span>{showAdvancedOptions ? 'Hide Advanced Options' : 'Show Advanced Options'}</span>\n              </div>\n\n              {showAdvancedOptions && (\n                <div className=\"advanced-options\">\n                  {outputFormat === 'gif' ? (\n                    <>\n                      {/* GIF-specific options */}\n                      <div className=\"quality-control\">\n                        <label>GIF Quality:</label>\n                        <div className=\"quality-options\">\n                          <label className=\"radio-label\">\n                            <input\n                              type=\"radio\"\n                              name=\"gif-quality\"\n                              value=\"low\"\n                              checked={gifQuality === 'low'}\n                              onChange={() => setGifQuality('low')}\n                            />\n                            <span>Low (smaller file, faster)</span>\n                          </label>\n                          <label className=\"radio-label\">\n                            <input\n                              type=\"radio\"\n                              name=\"gif-quality\"\n                              value=\"medium\"\n                              checked={gifQuality === 'medium'}\n                              onChange={() => setGifQuality('medium')}\n                            />\n                            <span>Medium (balanced)</span>\n                          </label>\n                          <label className=\"radio-label\">\n                            <input\n                              type=\"radio\"\n                              name=\"gif-quality\"\n                              value=\"high\"\n                              checked={gifQuality === 'high'}\n                              onChange={() => setGifQuality('high')}\n                            />\n                            <span>High (better quality, larger file)</span>\n                          </label>\n                        </div>\n                      </div>\n\n                      <div className=\"gif-size-control\">\n                        <label>GIF Width: {gifWidth}px</label>\n                        <input\n                          type=\"range\"\n                          min=\"160\"\n                          max=\"800\"\n                          step=\"80\"\n                          value={gifWidth}\n                          onChange={(e) => setGifWidth(Number(e.target.value))}\n                          className=\"gif-width-slider\"\n                        />\n                        <div className=\"size-note\">\n                          <Info size={14} />\n                          <span>Smaller width = smaller file size. Height will adjust proportionally.</span>\n                        </div>\n                      </div>\n\n                      <div className=\"gif-warning\">\n                        <AlertCircle size={16} />\n                        <span>\n                          Note: Creating GIFs can be memory-intensive. For high-quality results with longer videos,\n                          consider using a video format instead.\n                        </span>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      {/* Video format options */}\n                      <div className=\"quality-control\">\n                        <label>Output Quality:</label>\n                        <div className=\"quality-options\">\n                          <label className=\"radio-label\">\n                            <input\n                              type=\"radio\"\n                              name=\"quality\"\n                              value=\"low\"\n                              checked={videoQuality === 'low'}\n                              onChange={() => setVideoQuality('low')}\n                            />\n                            <span>Low (faster processing)</span>\n                          </label>\n                          <label className=\"radio-label\">\n                            <input\n                              type=\"radio\"\n                              name=\"quality\"\n                              value=\"medium\"\n                              checked={videoQuality === 'medium'}\n                              onChange={() => setVideoQuality('medium')}\n                            />\n                            <span>Medium</span>\n                          </label>\n                          <label className=\"radio-label\">\n                            <input\n                              type=\"radio\"\n                              name=\"quality\"\n                              value=\"high\"\n                              checked={videoQuality === 'high'}\n                              onChange={() => setVideoQuality('high')}\n                            />\n                            <span>High (larger file size)</span>\n                          </label>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </div>\n              )}\n\n              <div className=\"process-controls\">\n                <button\n                  onClick={processVideo}\n                  className=\"process-button\"\n                  disabled={isProcessing}\n                >\n                  <PlayCircle size={18} />\n                  <span>Process {outputFormat === 'gif' ? 'GIF' : 'Video'} with {playbackSpeed}x Speed</span>\n                </button>\n\n                <button onClick={resetAll} className=\"reset-button\">\n                  <RefreshCw size={18} />\n                  <span>Reset</span>\n                </button>\n              </div>\n            </div>\n          )}\n\n          {/* Processing indicator */}\n          {isProcessing && (\n            <div className=\"processing-section\">\n              <h3>Processing {outputFormat === 'gif' ? 'GIF' : 'Video'}...</h3>\n              <div className=\"progress-container\">\n                <div className=\"progress-bar\" style={{ width: `${processingProgress}%` }}></div>\n              </div>\n              <div className=\"progress-info\">\n                <span>{Math.round(processingProgress)}% Complete</span>\n                <button onClick={cancelProcessing} className=\"cancel-button\">\n                  <StopCircle size={16} />\n                  <span>Cancel</span>\n                </button>\n              </div>\n              <p className=\"processing-note\">\n                <Info size={16} />\n                <span>\n                  {outputFormat === 'gif'\n                    ? \"Creating GIFs requires significant processing. This may take several minutes depending on video length and quality settings.\"\n                    : \"Depending on the video size and your device's performance, this might take a while. Please don't close this page.\"}\n                </span>\n              </p>\n            </div>\n          )}\n\n          {/* Processed video section */}\n          {processedVideoUrl && (\n            <div className=\"processed-video-section\">\n              <h3>Processed {outputFormat === 'gif' ? 'Animation' : 'Video'} ({playbackSpeed}x Speed)</h3>\n\n              {/* Always use video tag since we're now always producing WebM */}\n              <div className=\"video-container\">\n                <video\n                  ref={processedVideoRef}\n                  src={processedVideoUrl}\n                  controls\n                  autoPlay\n                  loop\n                  key={processedVideoUrl} // Add key to force re-render\n                />\n              </div>\n\n              <div className=\"download-controls\">\n                <button onClick={downloadVideo} className=\"download-button\">\n                  <Download size={18} />\n                  <span>Download Processed {outputFormat === 'gif' ? 'Animation' : 'Video'}</span>\n                </button>\n\n                <button onClick={resetAll} className=\"reset-button\">\n                  <RefreshCw size={18} />\n                  <span>Process Another {outputFormat === 'gif' ? 'Animation' : 'Video'}</span>\n                </button>\n              </div>\n\n              {outputFormat === 'gif' && (\n                <div className=\"info-message\">\n                  <Info size={16} />\n                  <span>\n                    Due to browser limitations, your animation has been created as a WebM video instead of a GIF.\n                    This format still preserves all speed adjustments and plays perfectly in browsers, and can be\n                    converted to GIF using desktop tools if needed.\n                  </span>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Error and success messages */}\n          {error && (\n            <div className=\"error-message\">\n              <AlertCircle size={16} />\n              <span>{error}</span>\n            </div>\n          )}\n\n          {success && (\n            <div className=\"success-message\">\n              <Check size={16} />\n              <span>{success}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Instructions section */}\n        <div className=\"instructions-section\">\n          <h3>How to Use This Tool</h3>\n          <ol>\n            <li>Upload a video file using the selector above</li>\n            <li>Choose your preferred output format (WebM, MP4, or GIF)</li>\n            <li>Adjust the playback speed using the slider or preset buttons</li>\n            <li>Click \"Process Video\" to create your speed-adjusted video</li>\n            <li>Preview the result and download your new video file</li>\n          </ol>\n\n          <div className=\"tips\">\n            <h4>Tips</h4>\n            <ul>\n              <li>For smooth slow motion, use values less than 1 (0.5x, 0.25x)</li>\n              <li>For time-lapse effects, use faster speeds (2x, 4x)</li>\n              <li>Processing high-resolution videos may take longer</li>\n              <li>For best results with slow motion, try to use videos recorded at high frame rates (60fps or higher)</li>\n              <li>When creating GIFs, using smaller dimensions and lower quality settings will result in smaller file sizes</li>\n            </ul>\n          </div>\n\n          <div className=\"technical-notes\">\n            <h4>Technical Notes</h4>\n            <ul>\n              <li>All processing happens in your browser - videos are not uploaded to any server</li>\n              <li>You can choose from multiple output formats (WebM, MP4, GIF)</li>\n              <li>Maximum supported file size is 500MB</li>\n              <li>Processing large videos may use significant system resources</li>\n              <li>GIF creation uses the GIF.js library and can be memory-intensive. For longer videos, video formats are recommended.</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport default VideoSpeedController;"],"names":["VideoSpeedController","videoFile","setVideoFile","useState","videoUrl","setVideoUrl","playbackSpeed","setPlaybackSpeed","isProcessing","setIsProcessing","processedVideoUrl","setProcessedVideoUrl","isPlaying","setIsPlaying","duration","setDuration","currentTime","setCurrentTime","showAdvancedOptions","setShowAdvancedOptions","videoQuality","setVideoQuality","outputFormat","setOutputFormat","error","setError","success","setSuccess","videoInfo","setVideoInfo","processingProgress","setProcessingProgress","fileKey","setFileKey","gifQuality","setGifQuality","gifWidth","setGifWidth","videoRef","useRef","processedVideoRef","mediaRecorderRef","chunksRef","fileInputRef","canvasRef","processingCancelledRef","gifFramesRef","gifWorkerRef","useEffect","script","getSupportedMimeType","format","possibleTypes","type","formatBytes","bytes","decimals","k","dm","sizes","i","formatDuration","seconds","mins","secs","formatCurrentTime","getEstimatedDuration","estimatedDuration","handleFileChange","event","file","url","video","scaledWidth","e","togglePlayPause","handleTimeUpdate","handleSpeedChange","createGifFromFrames","frames","width","height","frameDelay","resolve","reject","gifQualitySettings","gif","framesAdded","totalFrames","frame","addProgress","frameError","progress","timeoutId","blob","processVideo","isMemoryLimited","canvas","ctx","targetWidth","targetHeight","videoQualitySettings","startTime","totalDuration","frameSkip","frameCount","framesProcessed","processGifFrame","frameImg","frameCanvas","frameDuration","nextTime","gifBlob","gifUrl","gifError","animatedCanvas","animCtx","stream","alternateRecorder","animChunks","fallbackBlob","fallbackUrl","frameIndex","renderFrame","animProgress","finalError","mimeType","blobMimeType","processFrame","err","errorMsg","cancelProcessing","resetAll","downloadVideo","a","speedText","originalName","extension","formatNote","descriptionElement","jsxs","jsx","Info","Layout","Upload","StopCircle","PlayCircle","Settings","Fragment","AlertCircle","RefreshCw","Download","Check"],"mappings":"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"}