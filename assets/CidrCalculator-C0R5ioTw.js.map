{"version":3,"file":"CidrCalculator-C0R5ioTw.js","sources":["../../src/components/CidrCalculator.jsx"],"sourcesContent":["import Layout from './Layout'; // Import the Layout component\nimport { useState } from 'react';\nimport { Calculator, Network, ServerCrash, Check, Info, ArrowLeft, RefreshCw, Copy, ChevronDown, ChevronUp, Layers, Grid, AlertTriangle } from 'lucide-react';\nimport { Link } from 'react-router-dom';\n\nfunction CidrCalculator() {\n  // Tab state\n  const [activeTab, setActiveTab] = useState('calculator'); // 'calculator' or 'subnet-creator'\n\n  // Calculator tab states\n  const [ipAddress, setIpAddress] = useState('');\n  const [cidrNotation, setCidrNotation] = useState('');\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState('');\n  const [copied, setCopied] = useState(false);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [calculating, setCalculating] = useState(false);\n\n  // Subnet creator tab states\n  const [baseNetwork, setBaseNetwork] = useState('');\n  const [baseCidr, setBaseCidr] = useState('');\n  const [subnetMode, setSubnetMode] = useState('count'); // 'count' or 'size'\n  const [subnetCount, setSubnetCount] = useState('');\n  const [subnetSize, setSubnetSize] = useState('');\n  const [subnetResults, setSubnetResults] = useState(null);\n  const [subnetError, setSubnetError] = useState('');\n  const [creatingSubnets, setCreatingSubnets] = useState(false);\n\n  // Helper function to validate IP address\n  const isValidIp = (ip) => {\n    const ipPattern = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    return ipPattern.test(ip);\n  };\n\n  // Helper function to validate CIDR notation\n  const isValidCidr = (cidr) => {\n    const cidrValue = parseInt(cidr, 10);\n    return !isNaN(cidrValue) && cidrValue >= 0 && cidrValue <= 32;\n  };\n\n  // Convert IP address to binary\n  const ipToBinary = (ip) => {\n    return ip.split('.')\n      .map(octet => parseInt(octet, 10).toString(2).padStart(8, '0'))\n      .join('');\n  };\n\n  // Convert binary to IP address\n  const binaryToIp = (binary) => {\n    const octets = [];\n    for (let i = 0; i < 32; i += 8) {\n      octets.push(parseInt(binary.substr(i, 8), 2));\n    }\n    return octets.join('.');\n  };\n\n  // Calculate new CIDR prefix based on subnet count or size\n  const calculateNewPrefix = (currentPrefix, mode, value) => {\n    if (mode === 'count') {\n      // Calculate bits needed for the number of subnets\n      const subnetsRequested = parseInt(value, 10);\n      const bitsNeeded = Math.ceil(Math.log2(subnetsRequested));\n      return currentPrefix + bitsNeeded;\n    } else {\n      // Calculate from required host count (add 2 for network and broadcast addresses)\n      const hostsRequested = parseInt(value, 10);\n      const bitsNeeded = Math.ceil(Math.log2(hostsRequested + 2));\n      return 32 - bitsNeeded;\n    }\n  };\n\n  // Calculate subnet details (for main calculator)\n  const calculateSubnet = () => {\n    setCalculating(true);\n    setError('');\n    setResult(null);\n    setCopied(false);\n\n    // Simple validation\n    if (!ipAddress || !cidrNotation) {\n      setError('Please enter both IP address and CIDR prefix.');\n      setCalculating(false);\n      return;\n    }\n\n    // Validate IP address format\n    if (!isValidIp(ipAddress)) {\n      setError('Invalid IP address format. Please enter a valid IPv4 address (e.g., 192.168.1.1).');\n      setCalculating(false);\n      return;\n    }\n\n    // Validate CIDR notation\n    const cidrNum = parseInt(cidrNotation, 10);\n    if (isNaN(cidrNum) || cidrNum < 0 || cidrNum > 32) {\n      setError('Invalid CIDR prefix. Must be a number between 0 and 32.');\n      setCalculating(false);\n      return;\n    }\n\n    // Special case handling for /31 and /32 networks\n    const specialCaseMessage = cidrNum === 31 ?\n      \"Note: /31 networks are used for point-to-point links (RFC 3021) with 2 usable IPs.\" :\n      (cidrNum === 32 ? \"Note: /32 is a host route with a single usable IP address.\" : \"\");\n\n    // Convert IP to binary\n    const ipBinary = ipToBinary(ipAddress);\n    const cidrPrefix = parseInt(cidrNotation, 10);\n\n    // Calculate subnet mask binary\n    const subnetMaskBinary = '1'.repeat(cidrPrefix).padEnd(32, '0');\n\n    // Calculate network address binary\n    const networkBinary = ipBinary.substring(0, cidrPrefix).padEnd(32, '0');\n\n    // Calculate broadcast address binary\n    const broadcastBinary = ipBinary.substring(0, cidrPrefix).padEnd(32, '1');\n\n    // Convert binary addresses to decimal notation\n    const subnetMask = binaryToIp(subnetMaskBinary);\n    const networkAddress = binaryToIp(networkBinary);\n    const broadcastAddress = binaryToIp(broadcastBinary);\n\n    // Calculate first and last usable IP addresses\n    const totalIPs = Math.pow(2, 32 - cidrPrefix);\n    let firstUsableIp = networkAddress;\n    let lastUsableIp = broadcastAddress;\n\n    // If subnet has more than 2 IPs, adjust usable range\n    if (totalIPs > 2) {\n      // For network address, split and increment the last octet by 1\n      const firstIpParts = networkAddress.split('.');\n      firstIpParts[3] = parseInt(firstIpParts[3], 10) + 1;\n      firstUsableIp = firstIpParts.join('.');\n\n      // For broadcast address, split and decrement the last octet by 1\n      const lastIpParts = broadcastAddress.split('.');\n      lastIpParts[3] = parseInt(lastIpParts[3], 10) - 1;\n      lastUsableIp = lastIpParts.join('.');\n    }\n\n    // Calculate total usable hosts\n    let usableHosts = totalIPs - 2;\n    if (usableHosts < 0) usableHosts = 0; // Handle special cases like /31 and /32\n\n    // Format IP range for easy reading\n    const ipRange = `${firstUsableIp} - ${lastUsableIp}`;\n\n    // Wildcard mask\n    const wildcardParts = subnetMask.split('.').map(octet => 255 - parseInt(octet, 10));\n    const wildcardMask = wildcardParts.join('.');\n\n    // Create result object\n    const calculationResult = {\n      networkAddress,\n      broadcastAddress,\n      subnetMask,\n      wildcardMask,\n      cidrNotation: `/${cidrPrefix}`,\n      totalIPs,\n      usableHosts,\n      ipRange,\n      firstUsableIp,\n      lastUsableIp,\n      binarySubnetMask: subnetMaskBinary.match(/.{1,8}/g).join('.'),\n      binaryIp: ipBinary.match(/.{1,8}/g).join('.')\n    };\n\n    if (specialCaseMessage) {\n      calculationResult.specialNote = specialCaseMessage;\n    }\n\n    // Simulate a little processing time\n    setTimeout(() => {\n      setResult(calculationResult);\n      setCalculating(false);\n    }, 600);\n  };\n\n  // Create subnets from base network\n  const createSubnets = () => {\n    setCreatingSubnets(true);\n    setSubnetError('');\n    setSubnetResults(null);\n\n    // Validate inputs\n    if (!baseNetwork || !baseCidr) {\n      setSubnetError('Please enter both base network address and CIDR prefix.');\n      setCreatingSubnets(false);\n      return;\n    }\n\n    // Validate IP address format\n    if (!isValidIp(baseNetwork)) {\n      setSubnetError('Invalid network address format. Please enter a valid IPv4 address.');\n      setCreatingSubnets(false);\n      return;\n    }\n\n    // Validate CIDR notation\n    if (!isValidCidr(baseCidr)) {\n      setSubnetError('Invalid CIDR prefix. Must be a number between 0 and 32.');\n      setCreatingSubnets(false);\n      return;\n    }\n\n    const baseCidrNum = parseInt(baseCidr, 10);\n\n    // Validate subnet mode inputs\n    if (subnetMode === 'count' && (!subnetCount || isNaN(parseInt(subnetCount, 10)) || parseInt(subnetCount, 10) <= 0)) {\n      setSubnetError('Please enter a valid number of subnets (must be greater than 0).');\n      setCreatingSubnets(false);\n      return;\n    }\n\n    if (subnetMode === 'size' && (!subnetSize || isNaN(parseInt(subnetSize, 10)) || parseInt(subnetSize, 10) <= 0)) {\n      setSubnetError('Please enter a valid subnet size (must be greater than 0).');\n      setCreatingSubnets(false);\n      return;\n    }\n\n    try {\n      // Calculate the new CIDR prefix for subnets\n      let newCidrPrefix;\n      let actualSubnetCount;\n\n      if (subnetMode === 'count') {\n        newCidrPrefix = calculateNewPrefix(baseCidrNum, 'count', subnetCount);\n        actualSubnetCount = Math.pow(2, newCidrPrefix - baseCidrNum);\n\n        // Validate if the new prefix exceeds 30 (minimum practical subnet size in most cases)\n        if (newCidrPrefix > 30) {\n          setSubnetError(`Creating ${subnetCount} subnets would result in a CIDR prefix larger than /30, which is too small for practical use.`);\n          setCreatingSubnets(false);\n          return;\n        }\n      } else {\n        // Size mode\n        newCidrPrefix = calculateNewPrefix(baseCidrNum, 'size', subnetSize);\n        actualSubnetCount = Math.pow(2, newCidrPrefix - baseCidrNum);\n\n        // Validate if the new prefix can fit within the base network\n        if (newCidrPrefix < baseCidrNum) {\n          setSubnetError(`The requested subnet size is larger than the base network. Please use a smaller subnet size.`);\n          setCreatingSubnets(false);\n          return;\n        }\n      }\n\n      // Get the base network in binary\n      const baseNetworkBinary = ipToBinary(baseNetwork).substring(0, baseCidrNum).padEnd(32, '0');\n      const baseNetworkDecimal = binaryToIp(baseNetworkBinary);\n\n      // Create the subnets\n      const subnets = [];\n      const blockSize = Math.pow(2, 32 - newCidrPrefix);\n      const baseIpInt = ipToInt(baseNetworkDecimal);\n\n      for (let i = 0; i < actualSubnetCount; i++) {\n        const subnetIpInt = baseIpInt + (i * blockSize);\n        const subnetIp = intToIp(subnetIpInt);\n        const subnetBroadcastInt = subnetIpInt + blockSize - 1;\n        const subnetBroadcast = intToIp(subnetBroadcastInt);\n\n        // Calculate first and last usable IPs\n        let firstUsable = subnetIp;\n        let lastUsable = subnetBroadcast;\n\n        // Adjust usable IPs for normal subnets (not /31 or /32)\n        if (newCidrPrefix < 31) {\n          firstUsable = intToIp(subnetIpInt + 1);\n          lastUsable = intToIp(subnetBroadcastInt - 1);\n        }\n\n        const subnetMask = cidrToSubnetMask(newCidrPrefix);\n        const totalIPs = Math.pow(2, 32 - newCidrPrefix);\n        const usableHosts = newCidrPrefix >= 31 ? totalIPs : totalIPs - 2;\n\n        subnets.push({\n          name: `Subnet ${i + 1}`,\n          network: subnetIp,\n          broadcast: subnetBroadcast,\n          cidr: `/${newCidrPrefix}`,\n          subnetMask,\n          totalIPs,\n          usableHosts,\n          firstUsable,\n          lastUsable,\n          ipRange: `${firstUsable} - ${lastUsable}`\n        });\n      }\n\n      // Create results object\n      const results = {\n        baseNetwork: baseNetworkDecimal,\n        baseCidr: `/${baseCidrNum}`,\n        newCidr: `/${newCidrPrefix}`,\n        subnetCount: actualSubnetCount,\n        requestedSubnetCount: subnetMode === 'count' ? parseInt(subnetCount, 10) : null,\n        requestedSubnetSize: subnetMode === 'size' ? parseInt(subnetSize, 10) : null,\n        subnets\n      };\n\n      // Simulate processing time\n      setTimeout(() => {\n        setSubnetResults(results);\n        setCreatingSubnets(false);\n      }, 600);\n\n    } catch (error) {\n      console.error('Error creating subnets:', error);\n      setSubnetError(`An error occurred: ${error.message || 'Unknown error'}`);\n      setCreatingSubnets(false);\n    }\n  };\n\n  // Helper to convert CIDR to subnet mask\n  const cidrToSubnetMask = (cidr) => {\n    const maskBinary = '1'.repeat(cidr).padEnd(32, '0');\n    return binaryToIp(maskBinary);\n  };\n\n  // Helper to convert IP to integer\n  const ipToInt = (ip) => {\n    const parts = ip.split('.');\n    return (parseInt(parts[0], 10) << 24) |\n      (parseInt(parts[1], 10) << 16) |\n      (parseInt(parts[2], 10) << 8) |\n      parseInt(parts[3], 10);\n  };\n\n  // Helper to convert integer to IP\n  const intToIp = (int) => {\n    return [\n      (int >>> 24) & 255,\n      (int >>> 16) & 255,\n      (int >>> 8) & 255,\n      int & 255\n    ].join('.');\n  };\n\n  const resetCalculator = () => {\n    if (activeTab === 'calculator') {\n      setIpAddress('');\n      setCidrNotation('');\n      setResult(null);\n      setError('');\n      setCopied(false);\n    } else {\n      setBaseNetwork('');\n      setBaseCidr('');\n      setSubnetCount('');\n      setSubnetSize('');\n      setSubnetResults(null);\n      setSubnetError('');\n    }\n  };\n\n  const copyToClipboard = (content) => {\n    if (!content) return;\n\n    navigator.clipboard.writeText(content)\n      .then(() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      })\n      .catch(err => {\n        console.error('Failed to copy text: ', err);\n      });\n  };\n\n  const copyMainResults = () => {\n    if (!result) return;\n\n    // Format result as plain text\n    const textToCopy = `\nCIDR Calculation Results:\nIP Address: ${ipAddress}${result.cidrNotation}\nNetwork Address: ${result.networkAddress}\nBroadcast Address: ${result.broadcastAddress}\nSubnet Mask: ${result.subnetMask}\nWildcard Mask: ${result.wildcardMask}\nTotal IPs: ${result.totalIPs.toLocaleString()}\nUsable Hosts: ${result.usableHosts.toLocaleString()}\nIP Range: ${result.ipRange}\n    `.trim();\n\n    copyToClipboard(textToCopy);\n  };\n\n  const copySubnetResults = () => {\n    if (!subnetResults) return;\n\n    // Format subnet results as plain text\n    let textToCopy = `\nBase Network: ${subnetResults.baseNetwork}${subnetResults.baseCidr}\nSubnet CIDR: ${subnetResults.newCidr}\nNumber of Subnets: ${subnetResults.subnetCount}\n`;\n\n    if (subnetResults.requestedSubnetCount) {\n      textToCopy += `Requested Subnet Count: ${subnetResults.requestedSubnetCount}\\n`;\n    }\n\n    if (subnetResults.requestedSubnetSize) {\n      textToCopy += `Requested Subnet Size: ${subnetResults.requestedSubnetSize} IPs\\n`;\n    }\n\n    textToCopy += '\\nSubnet Details:\\n';\n\n    subnetResults.subnets.forEach((subnet, index) => {\n      textToCopy += `\nSubnet ${index + 1}:\n  Network: ${subnet.network}${subnet.cidr}\n  Broadcast: ${subnet.broadcast}\n  Subnet Mask: ${subnet.subnetMask}\n  Total IPs: ${subnet.totalIPs}\n  Usable Hosts: ${subnet.usableHosts}\n  IP Range: ${subnet.ipRange}\n`;\n    });\n\n    copyToClipboard(textToCopy.trim());\n  };\n\n  // Create description element for the Layout\n  const descriptionElement = (\n    <div className=\"info-box\">\n      <Info size={20} />\n      <p>\n        Calculate subnet information or create subnet allocations similar to AWS VPC. All calculations are performed locally in your browser.\n      </p>\n    </div>\n  );\n\n  return (\n    <Layout\n      title=\"CIDR Subnet Calculator\"\n      description={descriptionElement}\n    >\n\n      <div className=\"tab-container\">\n        <button\n          className={`tab-button ${activeTab === 'calculator' ? 'active' : ''}`}\n          onClick={() => setActiveTab('calculator')}\n        >\n          <Calculator size={18} />\n          CIDR Calculator\n        </button>\n        <button\n          className={`tab-button ${activeTab === 'subnet-creator' ? 'active' : ''}`}\n          onClick={() => setActiveTab('subnet-creator')}\n        >\n          <Layers size={18} />\n          Subnet Creator\n        </button>\n      </div>\n\n      <div className=\"calculator-container\">\n        {activeTab === 'calculator' && (\n          <>\n            <div className=\"input-section\">\n              <div className=\"input-group\">\n                <label htmlFor=\"ip-address\">IP Address</label>\n                <div className=\"input-with-icon\">\n                  <Network size={18} className=\"input-icon\" />\n                  <input\n                    id=\"ip-address\"\n                    type=\"text\"\n                    value={ipAddress}\n                    onChange={(e) => setIpAddress(e.target.value)}\n                    placeholder=\"e.g., 192.168.1.1\"\n                    className=\"text-input\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"input-group\">\n                <label htmlFor=\"cidr-prefix\">CIDR Prefix</label>\n                <div className=\"input-with-icon\">\n                  <Calculator size={18} className=\"input-icon\" />\n                  <input\n                    id=\"cidr-prefix\"\n                    type=\"text\"\n                    value={cidrNotation}\n                    onChange={(e) => setCidrNotation(e.target.value)}\n                    placeholder=\"e.g., 24\"\n                    className=\"text-input\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"button-group\">\n                <button\n                  onClick={calculateSubnet}\n                  disabled={calculating}\n                  className=\"calculate-button\"\n                >\n                  {calculating ? (\n                    <>\n                      <ServerCrash size={18} className=\"spinner\" />\n                      <span>Calculating...</span>\n                    </>\n                  ) : (\n                    <>\n                      <Calculator size={18} />\n                      <span>Calculate</span>\n                    </>\n                  )}\n                </button>\n\n                <button onClick={resetCalculator} className=\"reset-button\">\n                  <RefreshCw size={18} />\n                  <span>Reset</span>\n                </button>\n              </div>\n\n              {error && (\n                <div className=\"error-message\">\n                  {error}\n                </div>\n              )}\n            </div>\n\n            {result && (\n              <div className=\"result-section\">\n                <div className=\"result-header\">\n                  <h3>Calculation Results</h3>\n                  <button onClick={copyMainResults} className=\"copy-button\">\n                    {copied ? (\n                      <>\n                        <Check size={18} />\n                        <span>Copied!</span>\n                      </>\n                    ) : (\n                      <>\n                        <Copy size={18} />\n                        <span>Copy Results</span>\n                      </>\n                    )}\n                  </button>\n                </div>\n\n                <div className=\"result-grid\">\n                  <div className=\"result-item\">\n                    <span className=\"result-label\">Network Address:</span>\n                    <span className=\"result-value\">{result.networkAddress}</span>\n                  </div>\n\n                  <div className=\"result-item\">\n                    <span className=\"result-label\">Broadcast Address:</span>\n                    <span className=\"result-value\">{result.broadcastAddress}</span>\n                  </div>\n\n                  <div className=\"result-item\">\n                    <span className=\"result-label\">Subnet Mask:</span>\n                    <span className=\"result-value\">{result.subnetMask}</span>\n                  </div>\n\n                  <div className=\"result-item\">\n                    <span className=\"result-label\">CIDR Notation:</span>\n                    <span className=\"result-value\">{result.cidrNotation}</span>\n                  </div>\n\n                  <div className=\"result-item\">\n                    <span className=\"result-label\">Total IPs:</span>\n                    <span className=\"result-value\">{result.totalIPs.toLocaleString()}</span>\n                  </div>\n\n                  <div className=\"result-item\">\n                    <span className=\"result-label\">Usable Hosts:</span>\n                    <span className=\"result-value\">{result.usableHosts.toLocaleString()}</span>\n                  </div>\n\n                  <div className=\"result-item full-width\">\n                    <span className=\"result-label\">IP Range:</span>\n                    <span className=\"result-value\">{result.ipRange}</span>\n                  </div>\n\n                  <div className=\"advanced-toggle\" onClick={() => setShowAdvanced(!showAdvanced)}>\n                    {showAdvanced ? <ChevronUp size={18} /> : <ChevronDown size={18} />}\n                    <span>Advanced Details</span>\n                  </div>\n\n                  {showAdvanced && (\n                    <>\n                      <div className=\"result-item\">\n                        <span className=\"result-label\">Wildcard Mask:</span>\n                        <span className=\"result-value\">{result.wildcardMask}</span>\n                      </div>\n\n                      <div className=\"result-item\">\n                        <span className=\"result-label\">First Usable IP:</span>\n                        <span className=\"result-value\">{result.firstUsableIp}</span>\n                      </div>\n\n                      <div className=\"result-item\">\n                        <span className=\"result-label\">Last Usable IP:</span>\n                        <span className=\"result-value\">{result.lastUsableIp}</span>\n                      </div>\n\n                      <div className=\"result-item\">\n                        <span className=\"result-label\">IP (Binary):</span>\n                        <span className=\"result-value monospace\">{result.binaryIp}</span>\n                      </div>\n\n                      <div className=\"result-item\">\n                        <span className=\"result-label\">Subnet Mask (Binary):</span>\n                        <span className=\"result-value monospace\">{result.binarySubnetMask}</span>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </>\n        )}\n\n        {activeTab === 'subnet-creator' && (\n          <>\n            <div className=\"input-section subnet-creator-section\">\n              <div className=\"subnet-base-inputs\">\n                <div className=\"input-group\">\n                  <label htmlFor=\"base-network\">Base Network Address</label>\n                  <div className=\"input-with-icon\">\n                    <Network size={18} className=\"input-icon\" />\n                    <input\n                      id=\"base-network\"\n                      type=\"text\"\n                      value={baseNetwork}\n                      onChange={(e) => setBaseNetwork(e.target.value)}\n                      placeholder=\"e.g., 10.0.0.0\"\n                      className=\"text-input\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"input-group\">\n                  <label htmlFor=\"base-cidr\">Base CIDR Prefix</label>\n                  <div className=\"input-with-icon\">\n                    <Calculator size={18} className=\"input-icon\" />\n                    <input\n                      id=\"base-cidr\"\n                      type=\"text\"\n                      value={baseCidr}\n                      onChange={(e) => setBaseCidr(e.target.value)}\n                      placeholder=\"e.g., 16\"\n                      className=\"text-input\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"subnet-mode-selector\">\n                <label>Subnet Creation Mode</label>\n                <div className=\"radio-group\">\n                  <label className=\"radio-label\">\n                    <input\n                      type=\"radio\"\n                      name=\"subnet-mode\"\n                      checked={subnetMode === 'count'}\n                      onChange={() => setSubnetMode('count')}\n                    />\n                    <span>Number of Subnets</span>\n                  </label>\n                  <label className=\"radio-label\">\n                    <input\n                      type=\"radio\"\n                      name=\"subnet-mode\"\n                      checked={subnetMode === 'size'}\n                      onChange={() => setSubnetMode('size')}\n                    />\n                    <span>Subnet Size (IPs)</span>\n                  </label>\n                </div>\n              </div>\n\n              {subnetMode === 'count' ? (\n                <div className=\"input-group\">\n                  <label htmlFor=\"subnet-count\">Number of Subnets</label>\n                  <div className=\"input-with-icon\">\n                    <Grid size={18} className=\"input-icon\" />\n                    <input\n                      id=\"subnet-count\"\n                      type=\"number\"\n                      min=\"1\"\n                      value={subnetCount}\n                      onChange={(e) => setSubnetCount(e.target.value)}\n                      placeholder=\"e.g., 4\"\n                      className=\"text-input\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"input-group\">\n                  <label htmlFor=\"subnet-size\">IPs per Subnet</label>\n                  <div className=\"input-with-icon\">\n                    <Layers size={18} className=\"input-icon\" />\n                    <input\n                      id=\"subnet-size\"\n                      type=\"number\"\n                      min=\"1\"\n                      value={subnetSize}\n                      onChange={(e) => setSubnetSize(e.target.value)}\n                      placeholder=\"e.g., 256\"\n                      className=\"text-input\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              <div className=\"subnet-info-note\">\n                <AlertTriangle size={16} />\n                <span>\n                  {subnetMode === 'count'\n                    ? 'Subnets will be created with equal sizes based on the number requested.'\n                    : 'Subnets will be created to accommodate at least the requested number of IPs.'}\n                </span>\n              </div>\n\n              <div className=\"button-group\">\n                <button\n                  onClick={createSubnets}\n                  disabled={creatingSubnets}\n                  className=\"calculate-button\"\n                >\n                  {creatingSubnets ? (\n                    <>\n                      <ServerCrash size={18} className=\"spinner\" />\n                      <span>Creating Subnets...</span>\n                    </>\n                  ) : (\n                    <>\n                      <Layers size={18} />\n                      <span>Create Subnets</span>\n                    </>\n                  )}\n                </button>\n\n                <button onClick={resetCalculator} className=\"reset-button\">\n                  <RefreshCw size={18} />\n                  <span>Reset</span>\n                </button>\n              </div>\n\n              {subnetError && (\n                <div className=\"error-message\">\n                  {subnetError}\n                </div>\n              )}\n            </div>\n\n            {subnetResults && (\n              <div className=\"result-section subnet-results-section\">\n                <div className=\"result-header\">\n                  <h3>Subnet Allocation Results</h3>\n                  <button onClick={copySubnetResults} className=\"copy-button\">\n                    {copied ? (\n                      <>\n                        <Check size={18} />\n                        <span>Copied!</span>\n                      </>\n                    ) : (\n                      <>\n                        <Copy size={18} />\n                        <span>Copy Results</span>\n                      </>\n                    )}\n                  </button>\n                </div>\n\n                <div className=\"subnet-summary\">\n                  <div className=\"summary-item\">\n                    <span className=\"summary-label\">Base Network:</span>\n                    <span className=\"summary-value\">{subnetResults.baseNetwork}{subnetResults.baseCidr}</span>\n                  </div>\n                  <div className=\"summary-item\">\n                    <span className=\"summary-label\">Subnet CIDR:</span>\n                    <span className=\"summary-value\">{subnetResults.newCidr}</span>\n                  </div>\n                  <div className=\"summary-item\">\n                    <span className=\"summary-label\">Number of Subnets:</span>\n                    <span className=\"summary-value\">{subnetResults.subnetCount}</span>\n                  </div>\n                  {subnetMode === 'count' && subnetResults.requestedSubnetCount && (\n                    <div className=\"summary-item\">\n                      <span className=\"summary-label\">Requested Subnets:</span>\n                      <span className=\"summary-value\">{subnetResults.requestedSubnetCount}</span>\n                    </div>\n                  )}\n                  {subnetMode === 'size' && subnetResults.requestedSubnetSize && (\n                    <div className=\"summary-item\">\n                      <span className=\"summary-label\">Requested IPs per Subnet:</span>\n                      <span className=\"summary-value\">{subnetResults.requestedSubnetSize}</span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"subnet-list\">\n                  <h4>Subnet Details</h4>\n                  <div className=\"subnet-table-container\">\n                    <table className=\"subnet-table\">\n                      <thead>\n                        <tr>\n                          <th>Name</th>\n                          <th>Network</th>\n                          <th>CIDR</th>\n                          <th>Usable IPs</th>\n                          <th>IP Range</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {subnetResults.subnets.map((subnet, index) => (\n                          <tr key={index}>\n                            <td>{subnet.name}</td>\n                            <td>{subnet.network}</td>\n                            <td>{subnet.cidr}</td>\n                            <td>{subnet.usableHosts.toLocaleString()}</td>\n                            <td className=\"ip-range-cell\">{subnet.ipRange}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n\n                  <div className=\"subnet-note\">\n                    <Info size={16} />\n                    <span>\n                      Each subnet has {subnetResults.subnets[0].totalIPs.toLocaleString()} total IPs with\n                      {' '}{subnetResults.subnets[0].usableHosts.toLocaleString()} usable hosts.\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </Layout>\n  );\n}\n\nexport default CidrCalculator;"],"names":["CidrCalculator","activeTab","setActiveTab","useState","ipAddress","setIpAddress","cidrNotation","setCidrNotation","result","setResult","error","setError","copied","setCopied","showAdvanced","setShowAdvanced","calculating","setCalculating","baseNetwork","setBaseNetwork","baseCidr","setBaseCidr","subnetMode","setSubnetMode","subnetCount","setSubnetCount","subnetSize","setSubnetSize","subnetResults","setSubnetResults","subnetError","setSubnetError","creatingSubnets","setCreatingSubnets","isValidIp","ip","isValidCidr","cidr","cidrValue","ipToBinary","octet","binaryToIp","binary","octets","i","calculateNewPrefix","currentPrefix","mode","value","subnetsRequested","bitsNeeded","hostsRequested","calculateSubnet","cidrNum","specialCaseMessage","ipBinary","cidrPrefix","subnetMaskBinary","networkBinary","broadcastBinary","subnetMask","networkAddress","broadcastAddress","totalIPs","firstUsableIp","lastUsableIp","firstIpParts","lastIpParts","usableHosts","ipRange","wildcardMask","calculationResult","createSubnets","baseCidrNum","newCidrPrefix","actualSubnetCount","baseNetworkBinary","baseNetworkDecimal","subnets","blockSize","baseIpInt","ipToInt","subnetIpInt","subnetIp","intToIp","subnetBroadcastInt","subnetBroadcast","firstUsable","lastUsable","cidrToSubnetMask","results","maskBinary","parts","int","resetCalculator","copyToClipboard","content","err","copyMainResults","textToCopy","copySubnetResults","subnet","index","descriptionElement","jsxs","jsx","Info","Layout","Calculator","Layers","Fragment","Network","ServerCrash","RefreshCw","Check","Copy","ChevronUp","ChevronDown","Grid","AlertTriangle"],"mappings":"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"}