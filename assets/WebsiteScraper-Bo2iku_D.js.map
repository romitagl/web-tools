{"version":3,"file":"WebsiteScraper-Bo2iku_D.js","sources":["../../src/components/WebsiteScraper.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { Globe, Download, AlertCircle, Loader, Info, RefreshCw, Copy, Check, File, StopCircle } from 'lucide-react';\nimport Layout from './Layout';\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\nfunction WebsiteScraper() {\n  // Component state\n  const [url, setUrl] = useState('');\n  const [isScrapingInProgress, setIsScrapingInProgress] = useState(false);\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [scrapedData, setScrapedData] = useState(null);\n  const [scrapingStats, setScrapingStats] = useState({\n    totalFiles: 0,\n    totalSize: 0,\n    htmlFiles: 0,\n    cssFiles: 0,\n    jsFiles: 0,\n    imageFiles: 0,\n    otherFiles: 0\n  });\n  const [downloadProgress, setDownloadProgress] = useState(0);\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);\n  const [depthLevel, setDepthLevel] = useState(0); // Default to level 0 for better performance\n  const [includeCss, setIncludeCss] = useState(true);\n  const [includeJs, setIncludeJs] = useState(true);\n  const [includeImages, setIncludeImages] = useState(true);\n  const [logs, setLogs] = useState([]);\n  const [isLogVisible, setIsLogVisible] = useState(true); // Default to visible\n  const [useImagePlaceholders, setUseImagePlaceholders] = useState(false);\n  const [saveOriginalUrls, setSaveOriginalUrls] = useState(true);\n  const [corsProxyMethods, setCorsProxyMethods] = useState({\n    allorigins: true,  // api.allorigins.win\n    corsproxy: true,   // corsproxy.io\n    cors: true,        // cors-anywhere.herokuapp.com\n    direct: true       // Direct fetch (no proxy)\n  });\n  const [currentProxy, setCurrentProxy] = useState('direct');\n  const [resourceLimit, setResourceLimit] = useState(500); // Maximum number of resources to download\n  const [processingDelay, setProcessingDelay] = useState(0); // Delay between requests in ms\n\n  // Add stopScraping ref to control the scraping process\n  const stopScrapingRef = useRef(false);\n\n  // Helper function to validate URL\n  const isValidUrl = (string) => {\n    try {\n      new URL(string);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  };\n\n  // Helper function to get domain from URL\n  const getDomain = (url) => {\n    try {\n      const urlObj = new URL(url);\n      return urlObj.hostname;\n    } catch (e) {\n      return '';\n    }\n  };\n\n  // Helper function to get file extension\n  const getFileExtension = (url) => {\n    try {\n      const path = new URL(url).pathname;\n      const ext = path.split('.').pop().toLowerCase();\n      if (ext && ext.length < 5) {\n        return ext;\n      }\n      return '';\n    } catch {\n      return '';\n    }\n  };\n\n  // Helper function to check if a URL is likely an image based on extension or path\n  const isLikelyImage = (url) => {\n    try {\n      // Check for image extensions\n      const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp', 'bmp', 'ico'];\n      const ext = getFileExtension(url);\n\n      if (imageExtensions.includes(ext)) {\n        return true;\n      }\n\n      // Check for image-like paths\n      const urlObj = new URL(url);\n      const path = urlObj.pathname.toLowerCase();\n\n      if (path.includes('/images/') ||\n        path.includes('/img/') ||\n        path.includes('/gallery/') ||\n        path.includes('/photos/') ||\n        path.includes('/thumbnails/')) {\n        return true;\n      }\n\n      return false;\n    } catch {\n      return false;\n    }\n  };\n\n  // Helper function to normalize URLs\n  const normalizeUrl = (baseUrl, relativeUrl) => {\n    try {\n      // Handle data URLs\n      if (relativeUrl.startsWith('data:')) {\n        return relativeUrl;\n      }\n\n      // Handle absolute URLs\n      if (relativeUrl.startsWith('http://') || relativeUrl.startsWith('https://')) {\n        return relativeUrl;\n      }\n\n      // Handle protocol-relative URLs (//example.com/path)\n      if (relativeUrl.startsWith('//')) {\n        const baseUrlObj = new URL(baseUrl);\n        return `${baseUrlObj.protocol}${relativeUrl}`;\n      }\n\n      // Handle root-relative URLs (/path)\n      if (relativeUrl.startsWith('/')) {\n        const baseUrlObj = new URL(baseUrl);\n        return `${baseUrlObj.origin}${relativeUrl}`;\n      }\n\n      // Handle relative URLs (path/file.ext)\n      const baseUrlObj = new URL(baseUrl);\n      const basePathParts = baseUrlObj.pathname.split('/').filter(Boolean);\n\n      // If the base URL ends with a file, remove it from the path\n      if (basePathParts.length > 0 && /\\.[a-zA-Z0-9]+$/.test(basePathParts[basePathParts.length - 1])) {\n        basePathParts.pop();\n      }\n\n      const basePath = basePathParts.length > 0 ? `/${basePathParts.join('/')}/` : '/';\n      return `${baseUrlObj.origin}${basePath}${relativeUrl}`;\n    } catch (error) {\n      console.error(\"URL normalization error:\", error);\n      return relativeUrl;\n    }\n  };\n\n  // Helper function to create a log entry\n  const addLog = (message, type = 'info') => {\n    setLogs(prevLogs => [...prevLogs, {\n      id: Date.now(),\n      message,\n      type,\n      timestamp: new Date().toLocaleTimeString()\n    }]);\n  };\n\n  // Helper function to format byte size\n  const formatBytes = (bytes, decimals = 2) => {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n  };\n\n  // Helper function to sanitize filenames\n  const sanitizeFilename = (filename) => {\n    // Remove URL parameters and fragments\n    let sanitized = filename.split(/[?#]/)[0];\n\n    // Replace special characters with underscores\n    sanitized = sanitized.replace(/[^\\w.-]/gi, '_');\n\n    // Ensure it's not empty\n    if (!sanitized || sanitized === '_' || sanitized === '.') {\n      sanitized = 'file_' + Date.now();\n    }\n\n    return sanitized.toLowerCase();\n  };\n\n  // Helper function to extract filename from URL\n  const getFilenameFromUrl = (urlString) => {\n    try {\n      const url = new URL(urlString);\n      let path = url.pathname;\n\n      // Remove trailing slashes\n      path = path.replace(/\\/$/, '');\n\n      // Get the last part of the path\n      const parts = path.split('/');\n      let filename = parts[parts.length - 1];\n\n      // If empty (like in case of domain.com/), use the hostname\n      if (!filename) {\n        filename = url.hostname;\n      }\n\n      return sanitizeFilename(filename);\n    } catch (e) {\n      console.error('Error extracting filename:', e);\n      return 'file_' + Date.now();\n    }\n  };\n\n  // Helper to create file paths for resources\n  const getLocalFilePath = (url, baseUrl, type) => {\n    let folderPath = '';\n    let extension = '';\n\n    // Determine the folder based on resource type\n    switch (type) {\n      case 'css':\n        folderPath = 'css/';\n        extension = '.css';\n        break;\n      case 'js':\n        folderPath = 'js/';\n        extension = '.js';\n        break;\n      case 'image':\n        folderPath = 'images/';\n        // Get the extension from the URL or default to .jpg\n        extension = '.' + (getFileExtension(url) || 'jpg');\n        break;\n      case 'html':\n        // Root folder for HTML\n        folderPath = '';\n        extension = '.html';\n        break;\n      default:\n        folderPath = 'other/';\n        extension = '';\n    }\n\n    // Generate a filename based on the URL\n    let filename = getFilenameFromUrl(url);\n\n    // Add extension if not already present\n    if (!filename.endsWith(extension) && extension) {\n      filename += extension;\n    }\n\n    // For HTML files, make the main page index.html\n    if (type === 'html' && url === baseUrl) {\n      return 'index.html';\n    }\n\n    // For other HTML files, ensure they have a unique name\n    if (type === 'html') {\n      // If filename is just the domain with .html, add page- prefix\n      if (filename === getDomain(url) + '.html') {\n        filename = 'page-' + filename;\n      }\n    }\n\n    return folderPath + filename;\n  };\n\n  // Get a data URI placeholder for an image// Get a better data URI placeholder for an image\n  const getImagePlaceholder = (width = 300, height = 200, url = '') => {\n    // Try to extract dimensions from filename if available\n    if (url && (width === 300 || height === 200)) {\n      const dimensionMatch = url.match(/(\\d+)x(\\d+)/);\n      if (dimensionMatch) {\n        width = parseInt(dimensionMatch[1]) || width;\n        height = parseInt(dimensionMatch[2]) || height;\n      }\n    }\n\n    // Generate a placeholder that shows the original URL too for debugging\n    const fileName = url.split('/').pop() || 'image';\n    return `data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${width} ${height}\" width=\"${width}\" height=\"${height}\">\n    <rect width=\"100%\" height=\"100%\" fill=\"#f0f0f0\"/>\n    <rect width=\"100%\" height=\"100%\" fill=\"url(%23pattern)\"/>\n    <defs>\n      <pattern id=\"pattern\" patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\" patternTransform=\"rotate(45)\">\n        <rect width=\"10\" height=\"10\" fill=\"#e0e0e0\"/>\n      </pattern>\n    </defs>\n    <text x=\"50%\" y=\"50%\" font-family=\"Arial\" font-size=\"14\" text-anchor=\"middle\" dominant-baseline=\"middle\" fill=\"#888\">Image Unavailable</text>\n    <text x=\"50%\" y=\"70%\" font-family=\"Arial\" font-size=\"10\" text-anchor=\"middle\" dominant-baseline=\"middle\" fill=\"#888\">${fileName}</text>\n  </svg>`;\n  };\n\n  // Function to add delay between requests\n  const delay = (ms) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n\n  // Add this function to your component\n  const getBrowserLikeHeaders = (url) => {\n    const urlObj = new URL(url);\n    return {\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',\n      'Accept-Language': 'en-US,en;q=0.9',\n      'Referer': `${urlObj.protocol}//${urlObj.hostname}/`,\n      'Sec-Fetch-Dest': 'document',\n      'Sec-Fetch-Mode': 'navigate',\n      'Sec-Fetch-Site': 'same-origin',\n      'Sec-Fetch-User': '?1',\n      'Upgrade-Insecure-Requests': '1',\n      'sec-ch-ua': '\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\"',\n      'sec-ch-ua-mobile': '?0',\n      'sec-ch-ua-platform': '\"Windows\"',\n      'Cache-Control': 'max-age=0'\n    };\n  };\n\n  // Update fetchWithProxies to use these headers\n  const fetchWithProxies = async (url, proxyMethods = corsProxyMethods) => {\n    // Array of proxy methods to try\n    const proxies = [\n      { name: 'direct', url: '', enabled: proxyMethods.direct },\n      { name: 'corsproxy', url: 'https://corsproxy.io/?', enabled: proxyMethods.corsproxy },\n      { name: 'allorigins', url: 'https://api.allorigins.win/raw?url=', enabled: proxyMethods.allorigins },\n      { name: 'cors', url: 'https://cors-anywhere.herokuapp.com/', enabled: proxyMethods.cors }\n    ].filter(proxy => proxy.enabled);\n\n    // If no proxies are enabled, return error\n    if (proxies.length === 0) {\n      throw new Error('No CORS proxies enabled. Enable at least one proxy method.');\n    }\n\n    let lastError = null;\n\n    // Try each proxy in sequence\n    for (const proxy of proxies) {\n      try {\n        const proxyUrl = proxy.name === 'direct' ? url : proxy.url + encodeURIComponent(url);\n\n        addLog(`Trying ${proxy.name === 'direct' ? 'direct fetch' : proxy.name} for ${url}`);\n        setCurrentProxy(proxy.name);\n\n        const headers = getBrowserLikeHeaders(url);\n\n        const response = await fetch(proxyUrl, {\n          headers: proxy.name === 'direct' ? headers : {\n            'Origin': window.location.origin,\n            'X-Requested-With': 'XMLHttpRequest'\n          }\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        addLog(`Success with ${proxy.name}`);\n        return response;\n      } catch (error) {\n        lastError = error;\n        addLog(`Failed with ${proxy.name}: ${error.message}`, 'error');\n        continue; // Try next proxy\n      }\n    }\n\n    // If all proxies failed, throw the last error\n    throw lastError || new Error('All proxy methods failed');\n  };\n\n  // Specialized function for fetching images\n  const fetchImage = async (url) => {\n    try {\n      // Try direct fetch first with headers\n      addLog(`Trying direct image fetch for ${url}`);\n      const response = await fetch(url, {\n        headers: {\n          'Referer': new URL(url).origin,\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n          'Origin': new URL(url).origin\n        }\n      });\n\n      if (response.ok) {\n        addLog(`Direct image fetch successful for ${url}`, 'success');\n        return response;\n      }\n    } catch (err) {\n      addLog(`Direct image fetch failed: ${err.message}`, 'warning');\n    }\n\n    // If direct fetch fails, try with CORS proxies\n    addLog(`Direct fetches failed, trying proxies for ${url}`);\n    return await fetchWithProxies(url, corsProxyMethods);\n  };\n\n\n  // Helper function to process images with fallbacks and retries\n  const processImage = async (url, resourceMap, imgFolder, mainUrl, statsRef, retryCount = 0) => {\n    try {\n      // Determine the filename\n      const localPath = getLocalFilePath(url, mainUrl, 'image');\n\n      // Check if we've already processed this image\n      if (resourceMap.has(url)) {\n        return resourceMap.get(url);\n      }\n\n      // Try to fetch the image\n      const response = await fetchImage(url);\n      const blob = await response.blob();\n\n      // Save the image file\n      imgFolder.file(localPath.replace('images/', ''), blob);\n\n      // Save mapping of URL to local path\n      resourceMap.set(url, localPath);\n\n      statsRef.imageFiles++;\n      statsRef.totalFiles++;\n      statsRef.totalSize += blob.size;\n\n      addLog(`Processed Image: ${localPath}`, 'success');\n      return localPath;\n    } catch (error) {\n      // Retry logic with exponential backoff\n      const maxRetries = 2; // Maximum number of retries\n\n      if (retryCount < maxRetries) {\n        const waitTime = Math.pow(2, retryCount) * 1000; // Exponential backoff: 1s, 2s, 4s, etc.\n        addLog(`Retrying image (${retryCount + 1}/${maxRetries}) in ${waitTime / 1000}s: ${url}`, 'warning');\n\n        await delay(waitTime);\n        return processImage(url, resourceMap, imgFolder, mainUrl, statsRef, retryCount + 1);\n      }\n\n      addLog(`Failed to process image ${url}: ${error.message}`, 'error');\n\n      // If placeholders are enabled, use one\n      if (useImagePlaceholders) {\n        const placeholderPath = getLocalFilePath(url, mainUrl, 'image');\n        resourceMap.set(url, placeholderPath);\n\n        // Try to get image dimensions if available\n        let width = 300, height = 200;\n        const fileParts = url.split('/').pop().split('-');\n        if (fileParts.length > 1) {\n          // Some sites encode dimensions in filenames like image-800-600.jpg\n          for (const part of fileParts) {\n            const dimensionMatch = part.match(/^(\\d+)x(\\d+)$/);\n            if (dimensionMatch) {\n              width = parseInt(dimensionMatch[1]);\n              height = parseInt(dimensionMatch[2]);\n              break;\n            }\n          }\n        }\n\n        // Create a placeholder with visual pattern\n        const svgContent = getImagePlaceholder(width, height, url);\n        const svgBlob = new Blob([svgContent], { type: 'image/svg+xml' });\n\n        // Save the placeholder\n        imgFolder.file(placeholderPath.replace('images/', ''), svgBlob);\n\n        statsRef.imageFiles++;\n        statsRef.totalFiles++;\n        statsRef.totalSize += svgContent.length;\n\n        addLog(`Saved placeholder for failed image: ${placeholderPath}`, 'warning');\n        return placeholderPath;\n      }\n\n      return null;\n    }\n  };\n  // Batched image processing to avoid overwhelming the browser\n  const processBatchedImages = async (imageUrls, resourceMap, imgFolder, mainUrl, statsRef, batchSize = 5) => {\n    const results = [];\n\n    // Process images in batches\n    for (let i = 0; i < imageUrls.length; i += batchSize) {\n      const batch = imageUrls.slice(i, i + batchSize);\n\n      // Process this batch in parallel\n      const batchResults = await Promise.allSettled(\n        batch.map(url => processImage(url, resourceMap, imgFolder, mainUrl, statsRef))\n      );\n\n      // Add results\n      results.push(...batchResults);\n\n      // Small delay between batches to avoid overloading\n      if (i + batchSize < imageUrls.length) {\n        await delay(300);\n      }\n    }\n\n    return results;\n  };\n\n  // Extract all images from HTML\n  const extractImages = (doc, currentUrl) => {\n    const imageUrls = new Set();\n\n    // Regular img tags\n    doc.querySelectorAll('img[src]').forEach(img => {\n      const src = img.getAttribute('src');\n      if (src && !src.startsWith('data:')) {\n        imageUrls.add(normalizeUrl(currentUrl, src));\n      }\n    });\n\n    // Background images in inline styles\n    doc.querySelectorAll('[style*=\"background\"]').forEach(el => {\n      const style = el.getAttribute('style');\n      if (style) {\n        const matches = style.match(/url\\(['\"]?([^'\")]+)['\"]?\\)/g);\n        if (matches) {\n          matches.forEach(match => {\n            const url = match.replace(/url\\(['\"]?([^'\")]+)['\"]?\\)/, '$1');\n            if (url && !url.startsWith('data:')) {\n              imageUrls.add(normalizeUrl(currentUrl, url));\n            }\n          });\n        }\n      }\n    });\n\n    return [...imageUrls];\n  };\n\n  // Helper to fix relative URLs in HTML content\n  const fixRelativeUrls = (html, baseUrl, resourceMap) => {\n    try {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(html, 'text/html');\n\n      // Fix links (a href)\n      const links = doc.querySelectorAll('a[href]');\n      links.forEach(link => {\n        const href = link.getAttribute('href');\n        if (href && !href.startsWith('javascript:') && !href.startsWith('mailto:') && !href.startsWith('#')) {\n          try {\n            const absoluteUrl = normalizeUrl(baseUrl, href);\n\n            // Store original URL if option is enabled\n            if (saveOriginalUrls) {\n              link.setAttribute('data-original-href', href);\n            }\n\n            // If we have a local version of this URL in our resourceMap, use it\n            if (resourceMap.has(absoluteUrl)) {\n              link.setAttribute('href', resourceMap.get(absoluteUrl));\n            } else {\n              // Otherwise keep the absolute URL\n              link.setAttribute('href', absoluteUrl);\n            }\n          } catch (e) {\n            console.error(`Error fixing link ${href}:`, e);\n          }\n        }\n      });\n\n      // Fix images (img src)\n      const images = doc.querySelectorAll('img[src]');\n      images.forEach(img => {\n        const src = img.getAttribute('src');\n        if (src && !src.startsWith('data:')) {\n          try {\n            const absoluteUrl = normalizeUrl(baseUrl, src);\n\n            // Store original URL if option is enabled\n            if (saveOriginalUrls) {\n              img.setAttribute('data-original-src', src);\n            }\n\n            // If we have a local version of this image in our resourceMap, use it\n            if (resourceMap.has(absoluteUrl)) {\n              img.setAttribute('src', resourceMap.get(absoluteUrl));\n            } else if (useImagePlaceholders) {\n              // Use a placeholder if image isn't available\n              const width = img.getAttribute('width') || 300;\n              const height = img.getAttribute('height') || 200;\n              img.setAttribute('src', getImagePlaceholder(width, height));\n            } else {\n              // Keep absolute URL\n              img.setAttribute('src', absoluteUrl);\n            }\n          } catch (e) {\n            console.error(`Error fixing image ${src}:`, e);\n          }\n        }\n      });\n\n      // Fix stylesheets (link href)\n      const stylesheets = doc.querySelectorAll('link[rel=\"stylesheet\"]');\n      stylesheets.forEach(link => {\n        const href = link.getAttribute('href');\n        if (href) {\n          try {\n            const absoluteUrl = normalizeUrl(baseUrl, href);\n\n            // Store original URL if option is enabled\n            if (saveOriginalUrls) {\n              link.setAttribute('data-original-href', href);\n            }\n\n            // If we have a local version of this stylesheet in our resourceMap, use it\n            if (resourceMap.has(absoluteUrl)) {\n              link.setAttribute('href', resourceMap.get(absoluteUrl));\n            } else {\n              // Keep absolute URL\n              link.setAttribute('href', absoluteUrl);\n            }\n          } catch (e) {\n            console.error(`Error fixing stylesheet ${href}:`, e);\n          }\n        }\n      });\n\n      // Fix scripts (script src)\n      const scripts = doc.querySelectorAll('script[src]');\n      scripts.forEach(script => {\n        const src = script.getAttribute('src');\n        if (src) {\n          try {\n            const absoluteUrl = normalizeUrl(baseUrl, src);\n\n            // Store original URL if option is enabled\n            if (saveOriginalUrls) {\n              script.setAttribute('data-original-src', src);\n            }\n\n            // If we have a local version of this script in our resourceMap, use it\n            if (resourceMap.has(absoluteUrl)) {\n              script.setAttribute('src', resourceMap.get(absoluteUrl));\n            } else {\n              // Keep absolute URL\n              script.setAttribute('src', absoluteUrl);\n            }\n          } catch (e) {\n            console.error(`Error fixing script ${src}:`, e);\n          }\n        }\n      });\n\n      // Add base tag to head if not present\n      if (!doc.querySelector('base')) {\n        const baseTag = doc.createElement('base');\n        baseTag.href = './';\n        const head = doc.querySelector('head');\n        if (head) {\n          head.insertBefore(baseTag, head.firstChild);\n        }\n      }\n\n      // Add CSS to make images responsive\n      const style = doc.createElement('style');\n      style.textContent = `\n        img { max-width: 100%; height: auto; }\n        body { font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }\n        /* Add a footer to show it's an archived copy */\n        body::after {\n          content: \"⚠️ This is an archived copy of the original page. Some functionality may not work.\";\n          display: block;\n          text-align: center;\n          padding: 10px;\n          margin-top: 20px;\n          background-color: #f8f9fa;\n          color: #333;\n          border-top: 1px solid #ddd;\n          font-size: 14px;\n        }\n      `;\n      doc.head.appendChild(style);\n\n      // Convert the modified document back to HTML\n      return new XMLSerializer().serializeToString(doc);\n    } catch (e) {\n      console.error('Error fixing relative URLs:', e);\n      return html; // Return original HTML if there's an error\n    }\n  };\n\n  // Clear all fields and results\n  const clearAll = () => {\n    setUrl('');\n    setScrapedData(null);\n    setError('');\n    setSuccessMessage('');\n    setDownloadProgress(0);\n    setScrapingStats({\n      totalFiles: 0,\n      totalSize: 0,\n      htmlFiles: 0,\n      cssFiles: 0,\n      jsFiles: 0,\n      imageFiles: 0,\n      otherFiles: 0\n    });\n    setLogs([]);\n    stopScrapingRef.current = false;\n  };\n\n  // Function to handle stopping the scraping process\n  const stopScraping = () => {\n    stopScrapingRef.current = true;\n    addLog(\"Stopping scraping process...\", 'warning');\n  };\n\n  // Download the generated ZIP file\n  const downloadZip = () => {\n    if (scrapedData && scrapedData.blob) {\n      try {\n        saveAs(scrapedData.blob, scrapedData.fileName);\n        addLog(`Downloaded: ${scrapedData.fileName}`, 'success');\n      } catch (err) {\n        console.error(\"Error downloading ZIP:\", err);\n        addLog(`Error downloading ZIP: ${err.message}`, 'error');\n        setError(`Error downloading ZIP: ${err.message}`);\n      }\n    }\n  };\n\n  // Toggle log visibility\n  const toggleLogs = () => {\n    setIsLogVisible(!isLogVisible);\n  };\n\n  // Copy log to clipboard\n  const copyLogs = () => {\n    const logText = logs.map(log => `[${log.timestamp}] ${log.type.toUpperCase()}: ${log.message}`).join('\\n');\n    navigator.clipboard.writeText(logText)\n      .then(() => {\n        addLog('Log copied to clipboard', 'success');\n      })\n      .catch(err => {\n        addLog(`Error copying log: ${err.message}`, 'error');\n      });\n  };\n\n  // Main scraping function\n  // Main scraping function\n  const scrapeWebsite = async () => {\n    // Validate URL\n    if (!url) {\n      setError(\"Please enter a URL to scrape\");\n      return;\n    }\n\n    if (!isValidUrl(url)) {\n      setError(\"Please enter a valid URL (including http:// or https://)\");\n      return;\n    }\n\n    // Reset states\n    setError('');\n    setSuccessMessage('');\n    setIsScrapingInProgress(true);\n    setDownloadProgress(0);\n    setScrapedData(null);\n    setLogs([]);\n    setScrapingStats({\n      totalFiles: 0,\n      totalSize: 0,\n      htmlFiles: 0,\n      cssFiles: 0,\n      jsFiles: 0,\n      imageFiles: 0,\n      otherFiles: 0\n    });\n\n    // Make sure the stop flag is reset\n    stopScrapingRef.current = false;\n\n    try {\n      const domain = getDomain(url);\n      addLog(`Starting to scrape ${domain}...`);\n      addLog(`Depth level: ${depthLevel}, Include CSS: ${includeCss}, Include JS: ${includeJs}, Include Images: ${includeImages}`);\n\n      // Create a new ZIP file\n      const zip = new JSZip();\n      const mainFolder = zip.folder(sanitizeFilename(domain));\n\n      // Create subfolders for different asset types\n      const cssFolder = mainFolder.folder(\"css\");\n      const jsFolder = mainFolder.folder(\"js\");\n      const imgFolder = mainFolder.folder(\"images\");\n      const otherFolder = mainFolder.folder(\"other\");\n\n      // Track processed URLs to avoid duplicates\n      const processedUrls = new Set();\n\n      // Track images to process separately\n      const imagesToProcess = new Set();\n\n      // Create a queue of URLs to process\n      const urlsToProcess = [{ url, depth: 0, type: 'html', isMainPage: true }];\n\n      // Map to store local file paths for each URL\n      const resourceMap = new Map();\n\n      // Initialize counters - created as a ref object so we can pass it to functions\n      let stats = {\n        totalFiles: 0,\n        totalSize: 0,\n        htmlFiles: 0,\n        cssFiles: 0,\n        jsFiles: 0,\n        imageFiles: 0,\n        otherFiles: 0\n      };\n\n      // Add resource limits to prevent crashing\n      const MAX_RESOURCES = resourceLimit || 500;  // Default to 500 if not set\n      let resourceCount = 0;\n\n      // Add a tracking mechanism for large resources\n      let totalBytesProcessed = 0;\n      const MAX_TOTAL_BYTES = 100 * 1024 * 1024; // 100MB limit\n\n      // Flag to track if the main HTML page was processed\n      let mainPageProcessed = false;\n      let mainPageHtml = null;\n\n      // Process URLs until queue is empty or depth limit is reached\n      while (urlsToProcess.length > 0 && !stopScrapingRef.current) {\n        // Stop if we've reached the resource limit\n        if (resourceCount >= MAX_RESOURCES) {\n          addLog(`Reached resource limit of ${MAX_RESOURCES} files. Stopping.`, 'warning');\n          break;\n        }\n\n        // Stop if we've processed too many bytes\n        if (totalBytesProcessed > MAX_TOTAL_BYTES) {\n          addLog(`Reached processing limit of ${formatBytes(MAX_TOTAL_BYTES)}. Stopping to prevent browser crash.`, 'warning');\n          break;\n        }\n\n        const { url: currentUrl, depth, type, isMainPage = false } = urlsToProcess.shift();\n\n        // Skip if already processed\n        if (processedUrls.has(currentUrl)) {\n          continue;\n        }\n\n        // Skip if depth exceeded (except for images at level 0, which we always want)\n        if (depth > depthLevel && !(depth === 1 && type === 'image' && depthLevel === 0)) {\n          continue;\n        }\n\n        // Add to processed set\n        processedUrls.add(currentUrl);\n\n        // Add small delay to avoid rate limiting\n        if (processingDelay > 0) {\n          await delay(processingDelay);\n        }\n\n        try {\n          addLog(`Processing: ${currentUrl}`);\n\n          // For images, just add to image processing queue\n          if (type === 'image') {\n            if (includeImages) {\n              imagesToProcess.add(currentUrl);\n            }\n            continue;\n          }\n\n          // Try to fetch the URL with different proxies\n          const response = await fetchWithProxies(currentUrl);\n          const contentType = response.headers.get('content-type') || '';\n\n          // Handle different content types\n          if (contentType.includes('text/html')) {\n            // Handle HTML\n            const htmlText = await response.text();\n\n            // Track resources and bytes\n            resourceCount++;\n            totalBytesProcessed += htmlText.length;\n\n            // Store the main page HTML separately\n            if (isMainPage) {\n              mainPageHtml = htmlText;\n              mainPageProcessed = true;\n              addLog(\"Successfully captured main page HTML\", 'success');\n            }\n\n            // Determine the filename\n            const localPath = getLocalFilePath(currentUrl, url, 'html');\n\n            // Save mapping of URL to local path\n            resourceMap.set(currentUrl, localPath);\n\n            // Parse HTML to find links, styles, scripts, and images\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(htmlText, 'text/html');\n\n            // Extract CSS links\n            if (includeCss) {\n              const styleLinks = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\n              for (const link of styleLinks) {\n                const cssUrl = link.getAttribute('href');\n                if (cssUrl) {\n                  const absoluteCssUrl = normalizeUrl(currentUrl, cssUrl);\n                  urlsToProcess.push({\n                    url: absoluteCssUrl,\n                    depth: depth + 1,\n                    type: 'css'\n                  });\n                }\n              }\n            }\n\n            // Extract JS scripts\n            if (includeJs) {\n              const scripts = Array.from(doc.querySelectorAll('script[src]'));\n              for (const script of scripts) {\n                const jsUrl = script.getAttribute('src');\n                if (jsUrl) {\n                  const absoluteJsUrl = normalizeUrl(currentUrl, jsUrl);\n                  urlsToProcess.push({\n                    url: absoluteJsUrl,\n                    depth: depth + 1,\n                    type: 'js'\n                  });\n                }\n              }\n            }\n\n            // Extract images\n            if (includeImages) {\n              const images = extractImages(doc, currentUrl);\n              images.forEach(imgUrl => {\n                if (!processedUrls.has(imgUrl) && !imagesToProcess.has(imgUrl)) {\n                  imagesToProcess.add(imgUrl);\n                }\n              });\n            }\n\n            // Extract a href links for further crawling\n            if (depth < depthLevel) {\n              const links = Array.from(doc.querySelectorAll('a[href]'));\n              for (const link of links) {\n                const hrefUrl = link.getAttribute('href');\n                if (hrefUrl && !hrefUrl.startsWith('#') && !hrefUrl.startsWith('javascript:') && !hrefUrl.startsWith('mailto:')) {\n                  const absoluteHrefUrl = normalizeUrl(currentUrl, hrefUrl);\n\n                  // Only process URLs from the same domain\n                  if (getDomain(absoluteHrefUrl) === domain) {\n                    urlsToProcess.push({\n                      url: absoluteHrefUrl,\n                      depth: depth + 1,\n                      type: 'html'\n                    });\n                  }\n                }\n              }\n            }\n\n            // If this is not the main page, count it in stats\n            if (!isMainPage) {\n              stats.htmlFiles++;\n              stats.totalFiles++;\n              stats.totalSize += htmlText.length;\n\n              addLog(`Processed HTML: ${localPath}`);\n            }\n          } else if ((contentType.includes('text/css') || currentUrl.endsWith('.css')) && includeCss) {\n            // Handle CSS\n            const css = await response.text();\n\n            // Track resources and bytes\n            resourceCount++;\n            totalBytesProcessed += css.length;\n\n            // Determine the filename\n            const localPath = getLocalFilePath(currentUrl, url, 'css');\n\n            // Extract URLs from CSS and add to image queue\n            if (includeImages) {\n              const urlMatches = css.match(/url\\(['\"]?([^'\")]+)['\"]?\\)/g) || [];\n              for (const match of urlMatches) {\n                const cssUrl = match.replace(/url\\(['\"]?([^'\")]+)['\"]?\\)/, '$1');\n                if (cssUrl && !cssUrl.startsWith('data:')) {\n                  const absoluteUrl = normalizeUrl(currentUrl, cssUrl);\n                  if (!processedUrls.has(absoluteUrl) && !imagesToProcess.has(absoluteUrl) && isLikelyImage(absoluteUrl)) {\n                    imagesToProcess.add(absoluteUrl);\n                  }\n                }\n              }\n            }\n\n            // Save the CSS file\n            cssFolder.file(localPath.replace('css/', ''), css);\n\n            // Save mapping of URL to local path\n            resourceMap.set(currentUrl, localPath);\n\n            stats.cssFiles++;\n            stats.totalFiles++;\n            stats.totalSize += css.length;\n\n            addLog(`Processed CSS: ${localPath}`);\n          } else if ((contentType.includes('javascript') || contentType.includes('text/js') || currentUrl.endsWith('.js')) && includeJs) {\n            // Handle JavaScript\n            const js = await response.text();\n\n            // Track resources and bytes\n            resourceCount++;\n            totalBytesProcessed += js.length;\n\n            // Determine the filename\n            const localPath = getLocalFilePath(currentUrl, url, 'js');\n\n            // Save the JS file\n            jsFolder.file(localPath.replace('js/', ''), js);\n\n            // Save mapping of URL to local path\n            resourceMap.set(currentUrl, localPath);\n\n            stats.jsFiles++;\n            stats.totalFiles++;\n            stats.totalSize += js.length;\n\n            addLog(`Processed JS: ${localPath}`);\n          } else {\n            // Handle other files\n            const blob = await response.blob();\n\n            // Track resources and bytes\n            resourceCount++;\n            totalBytesProcessed += blob.size;\n\n            // Determine the filename\n            const localPath = 'other/' + getFilenameFromUrl(currentUrl);\n\n            // Save the file\n            otherFolder.file(localPath.replace('other/', ''), blob);\n\n            // Save mapping of URL to local path\n            resourceMap.set(currentUrl, localPath);\n\n            stats.otherFiles++;\n            stats.totalFiles++;\n            stats.totalSize += blob.size;\n\n            addLog(`Processed Other: ${localPath}`);\n          }\n\n          // Update progress\n          const totalToProcess = processedUrls.size + urlsToProcess.length + imagesToProcess.size;\n          setDownloadProgress(processedUrls.size / totalToProcess * 100);\n          setScrapingStats(stats);\n\n          // Check if memory usage is getting high and warn user\n          if (performance && performance.memory && performance.memory.usedJSHeapSize >\n            performance.memory.jsHeapSizeLimit * 0.7) {\n            addLog('Warning: High memory usage detected. Consider reducing resource limit or processing smaller websites.', 'warning');\n          }\n        } catch (err) {\n          console.error(`Error processing ${currentUrl}:`, err);\n          addLog(`Error processing ${currentUrl}: ${err.message}`, 'error');\n        }\n      }\n\n      // Process images in batches\n      if (imagesToProcess.size > 0) {\n        addLog(`Processing ${imagesToProcess.size} images in batches...`);\n        // Pass the main URL and stats reference explicitly to avoid scope issues\n        await processBatchedImages([...imagesToProcess], resourceMap, imgFolder, url, stats);\n\n        // Update stats\n        setScrapingStats(stats);\n      }\n\n      // Check if the scraping was stopped\n      if (stopScrapingRef.current) {\n        addLog(\"Scraping was stopped by user\", 'warning');\n        setError(\"Scraping stopped by user\");\n        setIsScrapingInProgress(false);\n        return;\n      }\n\n      // Now that we have all resources, fix the HTML files\n      addLog(\"Processing HTML files and fixing URLs...\");\n\n      // Process main page first to ensure index.html is generated\n      if (mainPageProcessed && mainPageHtml) {\n        try {\n          // Fix relative URLs in the main page HTML\n          const fixedHtml = fixRelativeUrls(mainPageHtml, url, resourceMap);\n\n          // Save to index.html\n          mainFolder.file('index.html', fixedHtml);\n\n          // Count it in stats\n          stats.htmlFiles++;\n          stats.totalFiles++;\n          stats.totalSize += fixedHtml.length;\n\n          addLog(\"Successfully created index.html\", 'success');\n        } catch (err) {\n          console.error(\"Error creating index.html:\", err);\n          addLog(`Error creating index.html: ${err.message}`, 'error');\n\n          // Create a backup index.html if the main one failed\n          try {\n            const backupHtml = `<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>Archived website: ${domain}</title>\n<style>\nbody { font-family: system-ui, -apple-system, sans-serif; max-width: 900px; margin: 0 auto; padding: 20px; }\nh1 { color: #333; }\n.warning { background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 12px; margin: 20px 0; }\n.links { margin-top: 30px; }\n.links a { display: block; margin: 10px 0; color: #0066cc; text-decoration: none; }\n.links a:hover { text-decoration: underline; }\n</style>\n</head>\n<body>\n<h1>Archived Website: ${domain}</h1>\n<div class=\"warning\">\n<p>The main page could not be processed correctly. However, you can still browse the archived pages below.</p>\n</div>\n\n<div class=\"links\">\n<h2>Available Pages:</h2>\n${Array.from(processedUrls)\n                .filter(u => resourceMap.has(u) && resourceMap.get(u).endsWith('.html') && u !== url)\n                .map(u => `<a href=\"${resourceMap.get(u)}\">${u.replace(/https?:\\/\\//, '')}</a>`)\n                .join('\\n')}\n</div>\n</body>\n</html>`;\n\n            mainFolder.file('index.html', backupHtml);\n            addLog(\"Created backup index.html\", 'warning');\n          } catch (backupErr) {\n            addLog(\"Failed to create backup index.html\", 'error');\n          }\n        }\n      } else {\n        addLog(\"Warning: Could not create index.html - main page not processed\", 'warning');\n\n        // Create a fallback index.html\n        try {\n          const fallbackHtml = `<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>Archived website: ${domain}</title>\n<style>\nbody { font-family: system-ui, -apple-system, sans-serif; max-width: 900px; margin: 0 auto; padding: 20px; }\nh1 { color: #333; }\n.warning { background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 12px; margin: 20px 0; }\n.links { margin-top: 30px; }\n.links a { display: block; margin: 10px 0; color: #0066cc; text-decoration: none; }\n.links a:hover { text-decoration: underline; }\n</style>\n</head>\n<body>\n<h1>Archived Website: ${domain}</h1>\n<div class=\"warning\">\n<p>The main page could not be processed. Please browse the archived pages below.</p>\n</div>\n\n<div class=\"links\">\n<h2>Available Pages:</h2>\n${Array.from(processedUrls)\n              .filter(u => resourceMap.has(u) && resourceMap.get(u).endsWith('.html'))\n              .map(u => `<a href=\"${resourceMap.get(u)}\">${u.replace(/https?:\\/\\//, '')}</a>`)\n              .join('\\n')}\n</div>\n</body>\n</html>`;\n\n          mainFolder.file('index.html', fallbackHtml);\n          addLog(\"Created fallback index.html\", 'warning');\n        } catch (fallbackErr) {\n          addLog(\"Failed to create fallback index.html\", 'error');\n        }\n      }\n\n      // Process other HTML files\n      for (const processedUrl of processedUrls) {\n        // Skip non-HTML files or the main URL (which we've already processed)\n        if (!resourceMap.has(processedUrl) ||\n          !resourceMap.get(processedUrl).endsWith('.html') ||\n          processedUrl === url) {\n          continue;\n        }\n\n        try {\n          // Fetch the HTML content again\n          const response = await fetchWithProxies(processedUrl);\n          const htmlText = await response.text();\n\n          // Fix relative URLs in the HTML\n          const fixedHtml = fixRelativeUrls(htmlText, processedUrl, resourceMap);\n\n          // Get the local path\n          const localPath = resourceMap.get(processedUrl);\n\n          // Save the fixed HTML file\n          mainFolder.file(localPath, fixedHtml);\n\n          addLog(`Fixed and saved HTML: ${localPath}`);\n        } catch (err) {\n          console.error(`Error fixing HTML ${processedUrl}:`, err);\n          addLog(`Error fixing HTML ${processedUrl}: ${err.message}`, 'error');\n        }\n      }\n\n      // Create a readme file with usage instructions\n      addLog(\"Creating README file with usage instructions...\");\n      const readmeContent = `# Archived Website: ${domain}\n\nThis is an archived copy of the website ${url} created on ${new Date().toLocaleString()}.\n\n## How to Use This Archive\n\n1. Extract all files from this ZIP archive to a folder\n2. Open the 'index.html' file in a web browser\n3. You can now browse the archived content offline\n\n## Notes\n\n- This archive contains ${stats.totalFiles} files (${stats.htmlFiles} HTML, ${stats.cssFiles} CSS, ${stats.jsFiles} JS, ${stats.imageFiles} images)\n- Total size: ${formatBytes(stats.totalSize)}\n- Some functionality (like forms, search, dynamic content) may not work in the archived version\n- This archive was created for personal use and should respect the original website's terms of service\n\nCreated with Website Scraper Tool\n`;\n\n      mainFolder.file('README.txt', readmeContent);\n\n      // Generate and download ZIP\n      addLog(\"Generating ZIP file...\");\n      const content = await zip.generateAsync({\n        type: \"blob\",\n        compression: \"DEFLATE\",\n        compressionOptions: {\n          level: 9\n        },\n        onUpdate: (metadata) => {\n          setDownloadProgress(metadata.percent);\n        }\n      });\n\n      // Format timestamp for filename\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n      const zipFileName = `${sanitizeFilename(domain)}_${timestamp}.zip`;\n\n      // Save generated data\n      setScrapedData({\n        blob: content,\n        fileName: zipFileName\n      });\n\n      addLog(`ZIP file ready: ${zipFileName} (${formatBytes(content.size)})`, 'success');\n      setSuccessMessage(\"Website scraped successfully! Click Download to save the ZIP file.\");\n    } catch (err) {\n      console.error(\"Scraping error:\", err);\n      setError(`Error scraping website: ${err.message}. Try reducing the crawl depth or resource limit for complex websites.`);\n      addLog(`Scraping error: ${err.message}`, 'error');\n    } finally {\n      setIsScrapingInProgress(false);\n    }\n  };\n\n  // Create the description element for the Layout\n  const descriptionElement = (\n    <div className=\"info-banner\">\n      <div className=\"info-icon\">\n        <Info size={20} />\n      </div>\n      <div className=\"info-content\">\n        Create a local copy of a website by providing its URL. The tool will scrape the HTML, CSS, JavaScript, and images,\n        and package everything into a downloadable ZIP file. All processing happens in your browser for maximum privacy.\n      </div>\n    </div>\n  );\n\n  return (\n    <Layout\n      title=\"Website Scraper & Archiver\"\n      description={descriptionElement}\n    >\n      <div className=\"scraper-container\">\n        <div className=\"form-section\">\n          <div className=\"input-group\">\n            <label htmlFor=\"url-input\">Website URL:</label>\n            <div className=\"input-with-icon\">\n              <Globe size={18} className=\"input-icon\" />\n              <input\n                id=\"url-input\"\n                type=\"url\"\n                value={url}\n                onChange={(e) => setUrl(e.target.value)}\n                placeholder=\"https://example.com\"\n                className=\"text-input\"\n                disabled={isScrapingInProgress}\n              />\n            </div>\n          </div>\n\n          <div className=\"advanced-options-toggle\" onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}>\n            <Info size={16} />\n            <span>{showAdvancedOptions ? 'Hide Advanced Options' : 'Show Advanced Options'}</span>\n          </div>\n\n          {showAdvancedOptions && (\n            <div className=\"advanced-options\">\n              <div className=\"input-group\">\n                <label htmlFor=\"depth-level\">Crawl Depth Level:</label>\n                <select\n                  id=\"depth-level\"\n                  value={depthLevel}\n                  onChange={(e) => setDepthLevel(Number(e.target.value))}\n                  className=\"select-input\"\n                  disabled={isScrapingInProgress}\n                >\n                  <option value=\"0\">Level 0 (Current page only)</option>\n                  <option value=\"1\">Level 1 (Current page + direct links)</option>\n                  <option value=\"2\">Level 2 (Deeper crawl - may take longer)</option>\n                  <option value=\"3\">Level 3 (Deep crawl - may be very slow)</option>\n                </select>\n              </div>\n\n              <div className=\"checkbox-options\">\n                <label className=\"checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={includeCss}\n                    onChange={(e) => setIncludeCss(e.target.checked)}\n                    disabled={isScrapingInProgress}\n                  />\n                  <span>Include CSS Styles</span>\n                </label>\n\n                <label className=\"checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={includeJs}\n                    onChange={(e) => setIncludeJs(e.target.checked)}\n                    disabled={isScrapingInProgress}\n                  />\n                  <span>Include JavaScript Files</span>\n                </label>\n\n                <label className=\"checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={includeImages}\n                    onChange={(e) => setIncludeImages(e.target.checked)}\n                    disabled={isScrapingInProgress}\n                  />\n                  <span>Include Images</span>\n                </label>\n\n                <label className=\"checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={useImagePlaceholders}\n                    onChange={(e) => setUseImagePlaceholders(e.target.checked)}\n                    disabled={isScrapingInProgress}\n                  />\n                  <span>Use Image Placeholders for Failed Images</span>\n                </label>\n\n                <div className=\"proxy-options\">\n                  <label className=\"proxy-label\">CORS Proxy Methods:</label>\n                  <div className=\"proxy-checkboxes\">\n                    <label className=\"checkbox-label\">\n                      <input\n                        type=\"checkbox\"\n                        checked={corsProxyMethods.direct}\n                        onChange={(e) => setCorsProxyMethods({ ...corsProxyMethods, direct: e.target.checked })}\n                        disabled={isScrapingInProgress}\n                      />\n                      <span>Direct (No Proxy)</span>\n                    </label>\n                    <label className=\"checkbox-label\">\n                      <input\n                        type=\"checkbox\"\n                        checked={corsProxyMethods.corsproxy}\n                        onChange={(e) => setCorsProxyMethods({ ...corsProxyMethods, corsproxy: e.target.checked })}\n                        disabled={isScrapingInProgress}\n                      />\n                      <span>corsproxy.io</span>\n                    </label>\n                    <label className=\"checkbox-label\">\n                      <input\n                        type=\"checkbox\"\n                        checked={corsProxyMethods.allorigins}\n                        onChange={(e) => setCorsProxyMethods({ ...corsProxyMethods, allorigins: e.target.checked })}\n                        disabled={isScrapingInProgress}\n                      />\n                      <span>allorigins.win</span>\n                    </label>\n                  </div>\n                </div>\n\n                <div className=\"input-group\">\n                  <label htmlFor=\"resource-limit\">Resource Limit:</label>\n                  <input\n                    id=\"resource-limit\"\n                    type=\"number\"\n                    min=\"10\"\n                    max=\"2000\"\n                    value={resourceLimit}\n                    onChange={(e) => setResourceLimit(Number(e.target.value))}\n                    className=\"text-input\"\n                    disabled={isScrapingInProgress}\n                  />\n                  <div className=\"input-help\">Maximum number of files to download</div>\n                </div>\n\n                <div className=\"input-group\">\n                  <label htmlFor=\"processing-delay\">Processing Delay (ms):</label>\n                  <input\n                    id=\"processing-delay\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"1000\"\n                    value={processingDelay}\n                    onChange={(e) => setProcessingDelay(Number(e.target.value))}\n                    className=\"text-input\"\n                    disabled={isScrapingInProgress}\n                  />\n                  <div className=\"input-help\">Delay between requests (may help with rate limiting)</div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"note-box\">\n            <AlertCircle size={16} />\n            <p>\n              This tool respects <strong>robots.txt</strong> and is intended for personal archiving only.\n              Please respect website terms of service and copyright laws when using this tool.\n            </p>\n          </div>\n\n          <div className=\"button-group\">\n            {!isScrapingInProgress ? (\n              // Show Scrape button when not in progress\n              <button\n                onClick={scrapeWebsite}\n                disabled={!url}\n                className=\"action-button primary\"\n              >\n                <Globe size={18} />\n                <span>Scrape Website</span>\n              </button>\n            ) : (\n              // Show Stop button when scraping is in progress\n              <button\n                onClick={stopScraping}\n                className=\"action-button stop\"\n              >\n                <StopCircle size={18} />\n                <span>Stop Scraping</span>\n              </button>\n            )}\n\n            <button onClick={clearAll} className=\"action-button secondary\" disabled={isScrapingInProgress}>\n              <RefreshCw size={18} />\n              <span>Reset</span>\n            </button>\n          </div>\n\n          {error && (\n            <div className=\"error-message\">\n              <AlertCircle size={16} />\n              <span>{error}</span>\n            </div>\n          )}\n\n          {successMessage && (\n            <div className=\"success-message\">\n              <Check size={16} />\n              <span>{successMessage}</span>\n            </div>\n          )}\n        </div>\n\n        {isScrapingInProgress && (\n          <div className=\"progress-section\">\n            <h3>Scraping in Progress {stopScrapingRef.current && '(Stopping...)'}</h3>\n            <div className=\"progress-bar-container\">\n              <div className=\"progress-bar\" style={{ width: `${downloadProgress}%` }}></div>\n            </div>\n            <div className=\"progress-stats\">\n              <span>{downloadProgress.toFixed(1)}% Complete</span>\n              <span>Files: {scrapingStats.totalFiles}</span>\n              <span>Using: {currentProxy}</span>\n            </div>\n            <div className=\"stats-badges\">\n              <span className=\"stat-badge\">HTML: {scrapingStats.htmlFiles}</span>\n              <span className=\"stat-badge\">CSS: {scrapingStats.cssFiles}</span>\n              <span className=\"stat-badge\">JS: {scrapingStats.jsFiles}</span>\n              <span className=\"stat-badge\">Images: {scrapingStats.imageFiles}</span>\n            </div>\n            <button className=\"toggle-log-button\" onClick={toggleLogs}>\n              {isLogVisible ? 'Hide Log' : 'Show Log'} ({logs.length} entries)\n            </button>\n          </div>\n        )}\n\n        {isLogVisible && logs.length > 0 && (\n          <div className=\"log-container\">\n            <div className=\"log-header\">\n              <h3>Activity Log ({logs.length} entries)</h3>\n              <div className=\"log-actions\">\n                <button className=\"log-action-button\" onClick={copyLogs}>\n                  <Copy size={14} />\n                  <span>Copy</span>\n                </button>\n                <button className=\"log-action-button\" onClick={() => setLogs([])}>\n                  <RefreshCw size={14} />\n                  <span>Clear</span>\n                </button>\n              </div>\n            </div>\n            <div className=\"log-content\">\n              {logs.map(log => (\n                <div key={log.id} className={`log-entry ${log.type}`}>\n                  <span className=\"log-time\">{log.timestamp}</span>\n                  <span className=\"log-message\">{log.message}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {scrapedData && (\n          <div className=\"result-section\">\n            <h3>Scraping Complete</h3>\n\n            <div className=\"stats-container\">\n              <div className=\"stats-item\">\n                <div className=\"stats-icon\"><File size={16} /></div>\n                <div className=\"stats-label\">Total Files</div>\n                <div className=\"stats-value\">{scrapingStats.totalFiles}</div>\n              </div>\n              <div className=\"stats-item\">\n                <div className=\"stats-icon\"><File size={16} /></div>\n                <div className=\"stats-label\">Total Size</div>\n                <div className=\"stats-value\">{formatBytes(scrapingStats.totalSize)}</div>\n              </div>\n              <div className=\"stats-item\">\n                <div className=\"stats-icon\"><File size={16} /></div>\n                <div className=\"stats-label\">HTML Files</div>\n                <div className=\"stats-value\">{scrapingStats.htmlFiles}</div>\n              </div>\n              <div className=\"stats-item\">\n                <div className=\"stats-icon\"><File size={16} /></div>\n                <div className=\"stats-label\">CSS Files</div>\n                <div className=\"stats-value\">{scrapingStats.cssFiles}</div>\n              </div>\n              <div className=\"stats-item\">\n                <div className=\"stats-icon\"><File size={16} /></div>\n                <div className=\"stats-label\">JS Files</div>\n                <div className=\"stats-value\">{scrapingStats.jsFiles}</div>\n              </div>\n              <div className=\"stats-item\">\n                <div className=\"stats-icon\"><File size={16} /></div>\n                <div className=\"stats-label\">Images</div>\n                <div className=\"stats-value\">{scrapingStats.imageFiles}</div>\n              </div>\n            </div>\n\n            <div className=\"download-container\">\n              <button onClick={downloadZip} className=\"download-button\">\n                <Download size={18} />\n                <span>Download ZIP File</span>\n              </button>\n              <div className=\"file-info\">\n                {scrapedData.fileName} ({formatBytes(scrapedData.blob.size)})\n              </div>\n            </div>\n\n            <div className=\"instructions\">\n              <h4>How to use the downloaded archive:</h4>\n              <ol>\n                <li>Download and extract the ZIP file to your computer</li>\n                <li>Open the folder and locate the <code>index.html</code> file</li>\n                <li>Double-click the file to open it in your default web browser</li>\n                <li>You can now browse the archived website offline</li>\n              </ol>\n              <p className=\"note\">\n                <Info size={16} />\n                <span>Some website functionality might not work properly as dynamic features and server-side processing won't be available offline.</span>\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </Layout>\n  );\n}\n\nexport default WebsiteScraper;"],"names":["WebsiteScraper","url","setUrl","useState","isScrapingInProgress","setIsScrapingInProgress","error","setError","successMessage","setSuccessMessage","scrapedData","setScrapedData","scrapingStats","setScrapingStats","downloadProgress","setDownloadProgress","showAdvancedOptions","setShowAdvancedOptions","depthLevel","setDepthLevel","includeCss","setIncludeCss","includeJs","setIncludeJs","includeImages","setIncludeImages","logs","setLogs","isLogVisible","setIsLogVisible","useImagePlaceholders","setUseImagePlaceholders","saveOriginalUrls","setSaveOriginalUrls","corsProxyMethods","setCorsProxyMethods","currentProxy","setCurrentProxy","resourceLimit","setResourceLimit","processingDelay","setProcessingDelay","stopScrapingRef","useRef","isValidUrl","string","getDomain","getFileExtension","ext","isLikelyImage","imageExtensions","path","normalizeUrl","baseUrl","relativeUrl","baseUrlObj","basePathParts","basePath","addLog","message","type","prevLogs","formatBytes","bytes","decimals","k","dm","sizes","i","sanitizeFilename","filename","sanitized","getFilenameFromUrl","urlString","parts","e","getLocalFilePath","folderPath","extension","getImagePlaceholder","width","height","dimensionMatch","fileName","delay","ms","resolve","getBrowserLikeHeaders","urlObj","fetchWithProxies","proxyMethods","proxies","proxy","lastError","proxyUrl","headers","response","fetchImage","err","processImage","resourceMap","imgFolder","mainUrl","statsRef","retryCount","localPath","blob","waitTime","placeholderPath","fileParts","part","svgContent","svgBlob","processBatchedImages","imageUrls","batchSize","results","batch","batchResults","extractImages","doc","currentUrl","img","src","el","style","matches","match","fixRelativeUrls","html","link","href","absoluteUrl","script","baseTag","head","clearAll","stopScraping","downloadZip","saveAs","toggleLogs","copyLogs","logText","log","scrapeWebsite","domain","zip","JSZip","mainFolder","cssFolder","jsFolder","otherFolder","processedUrls","imagesToProcess","urlsToProcess","stats","MAX_RESOURCES","resourceCount","totalBytesProcessed","MAX_TOTAL_BYTES","mainPageProcessed","mainPageHtml","depth","isMainPage","contentType","htmlText","styleLinks","cssUrl","absoluteCssUrl","scripts","jsUrl","absoluteJsUrl","imgUrl","links","hrefUrl","absoluteHrefUrl","css","urlMatches","js","totalToProcess","fixedHtml","backupHtml","u","fallbackHtml","processedUrl","readmeContent","content","metadata","timestamp","zipFileName","descriptionElement","jsxs","jsx","Info","Layout","Globe","AlertCircle","StopCircle","RefreshCw","Check","Copy","File","Download"],"mappings":"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"}