{"version":3,"file":"PdfMerger-DWcYLZ3Z.js","sources":["../../src/components/PdfMerger.jsx"],"sourcesContent":["import Layout from './Layout'; // Import the Layout component\nimport { useState, useEffect } from 'react';\nimport { PDFDocument } from 'pdf-lib';\nimport { FileText, Image, Loader, Check, AlertCircle, Info, UploadCloud, ArrowLeft } from 'lucide-react';\nimport { Link } from 'react-router-dom';\n\nfunction PdfMerger() {\n  const [pdfFiles, setPdfFiles] = useState([]);\n  const [imageFiles, setImageFiles] = useState([]);\n  const [isMerging, setIsMerging] = useState(false);\n  const [mergeSuccess, setMergeSuccess] = useState(false);\n  const [activeTab, setActiveTab] = useState('pdfs'); // 'pdfs', 'images', 'both'\n  const [dragActive, setDragActive] = useState(false);\n\n  // Add useEffect to handle URL hash for tab selection\n  useEffect(() => {\n    // Get hash without the # symbol\n    const hash = window.location.hash.substring(1);\n\n    // Set active tab based on hash\n    if (hash === 'pdfs') {\n      setActiveTab('pdfs');\n    } else if (hash === 'images') {\n      setActiveTab('images');\n    } else if (hash === 'both') {\n      setActiveTab('both');\n    }\n\n    // Optional: Update URL hash when tab changes (for browser history)\n    const handleTabChange = () => {\n      if (activeTab && activeTab !== 'pdfs') { // 'pdfs' could be the default with no hash\n        window.history.replaceState(null, null, `#${activeTab}`);\n      }\n    };\n\n    handleTabChange();\n  }, [activeTab]); // Re-run when activeTab changes\n\n  // Update the onClick handler to also update URL hash\n  const handleTabClick = (tab) => {\n    setActiveTab(tab);\n    window.history.replaceState(null, null, `#${tab}`);\n  };\n\n  const handlePdfChange = (event) => {\n    const selectedFiles = Array.from(event.target.files);\n    setPdfFiles([...pdfFiles, ...selectedFiles]);\n    setMergeSuccess(false);\n  };\n\n  const handleImageChange = (event) => {\n    const selectedFiles = Array.from(event.target.files);\n    setImageFiles([...imageFiles, ...selectedFiles]);\n    setMergeSuccess(false);\n  };\n\n  const handleDragEnter = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(true);\n  };\n\n  const handleDragLeave = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const fileList = Array.from(e.dataTransfer.files);\n\n      if (activeTab === 'pdfs') {\n        const pdfList = fileList.filter(file => file.type === 'application/pdf');\n        if (pdfList.length > 0) {\n          setPdfFiles([...pdfFiles, ...pdfList]);\n        }\n      } else if (activeTab === 'images') {\n        const imageList = fileList.filter(file =>\n          file.type === 'image/jpeg' ||\n          file.type === 'image/jpg' ||\n          file.type === 'image/png'\n        );\n        if (imageList.length > 0) {\n          setImageFiles([...imageFiles, ...imageList]);\n        }\n      } else if (activeTab === 'both') {\n        const pdfList = fileList.filter(file => file.type === 'application/pdf');\n        const imageList = fileList.filter(file =>\n          file.type === 'image/jpeg' ||\n          file.type === 'image/jpg' ||\n          file.type === 'image/png'\n        );\n\n        if (pdfList.length > 0) {\n          setPdfFiles([...pdfFiles, ...pdfList]);\n        }\n\n        if (imageList.length > 0) {\n          setImageFiles([...imageFiles, ...imageList]);\n        }\n      }\n\n      setMergeSuccess(false);\n    }\n  };\n\n  const removeFile = (type, index) => {\n    if (type === 'pdf') {\n      const newFiles = [...pdfFiles];\n      newFiles.splice(index, 1);\n      setPdfFiles(newFiles);\n    } else {\n      const newFiles = [...imageFiles];\n      newFiles.splice(index, 1);\n      setImageFiles(newFiles);\n    }\n    setMergeSuccess(false);\n  };\n\n  const clearAll = () => {\n    if (activeTab === 'pdfs') {\n      setPdfFiles([]);\n    } else if (activeTab === 'images') {\n      setImageFiles([]);\n    } else {\n      setPdfFiles([]);\n      setImageFiles([]);\n    }\n    setMergeSuccess(false);\n  };\n\nconst mergePDFs = async () => {\n  setIsMerging(true);\n  setMergeSuccess(false);\n\n  try {\n    const pdfDoc = await PDFDocument.create();\n\n    // Improved file sorting - case-insensitive sort and handling numeric parts properly\n    const sortedFiles = pdfFiles.sort((a, b) => {\n      // Natural sort algorithm for filenames (so file10.pdf comes after file2.pdf)\n      return a.name.localeCompare(b.name, undefined, {\n        numeric: true,\n        sensitivity: 'base'\n      });\n    });\n\n    for (const file of sortedFiles) {\n      try {\n        const fileBytes = await file.arrayBuffer();\n        const tempDoc = await PDFDocument.load(fileBytes);\n        const copiedPages = await pdfDoc.copyPages(tempDoc, tempDoc.getPageIndices());\n        copiedPages.forEach((page) => pdfDoc.addPage(page));\n      } catch (fileError) {\n        console.error(`Error processing file ${file.name}:`, fileError);\n        // Continue with other files instead of completely failing\n        continue;\n      }\n    }\n\n    // Check if we were able to add any pages\n    if (pdfDoc.getPageCount() === 0) {\n      throw new Error(\"No valid PDF pages could be processed. Please check your files.\");\n    }\n\n    downloadPDF(await pdfDoc.save(), 'merged-pdfs.pdf');\n    setMergeSuccess(true);\n  } catch (error) {\n    console.error(\"Error merging PDFs:\", error);\n    alert(\"An error occurred while merging PDF files: \" + error.message);\n  } finally {\n    setIsMerging(false);\n  }\n};\n\n  const mergeImages = async () => {\n    setIsMerging(true);\n    setMergeSuccess(false);\n\n    try {\n      const pdfDoc = await PDFDocument.create();\n\n      // Sort files by name\n      const sortedFiles = imageFiles.sort((a, b) => a.name.localeCompare(b.name));\n\n      for (const file of sortedFiles) {\n        const imgBytes = await file.arrayBuffer();\n        let image;\n\n        // Check for supported image types\n        if (file.type === 'image/jpeg' || file.type === 'image/jpg') {\n          try {\n            image = await pdfDoc.embedJpg(imgBytes);\n          } catch (error) {\n            alert('Error processing JPEG file: ' + file.name + '. ' + error.message);\n            continue; // Skip this file and continue with others\n          }\n        } else if (file.type === 'image/png') {\n          try {\n            image = await pdfDoc.embedPng(imgBytes);\n          } catch (error) {\n            alert('Error processing PNG file: ' + file.name + '. ' + error.message);\n            continue; // Skip this file and continue with others\n          }\n        } else {\n          alert('Unsupported file type: ' + file.type);\n          return;\n        }\n\n        // Create a new page for each image\n        const page = pdfDoc.addPage([image.width, image.height]);\n        page.drawImage(image, {\n          x: 0,\n          y: 0,\n          width: image.width,\n          height: image.height,\n        });\n      }\n\n      downloadPDF(await pdfDoc.save(), 'merged-images.pdf');\n      setMergeSuccess(true);\n    } catch (error) {\n      console.error(\"Error merging images:\", error);\n      alert(\"An error occurred while merging image files. Please try again.\");\n    } finally {\n      setIsMerging(false);\n    }\n  };\n\n  const mergePDFsAndImages = async () => {\n    setIsMerging(true);\n    setMergeSuccess(false);\n\n    try {\n      const pdfDoc = await PDFDocument.create();\n\n      // Combine and sort files by name\n      const allFiles = [...pdfFiles, ...imageFiles].sort((a, b) => a.name.localeCompare(b.name));\n\n      for (const file of allFiles) {\n        if (file.type === 'application/pdf') {\n          const fileBytes = await file.arrayBuffer();\n          const tempDoc = await PDFDocument.load(fileBytes);\n          const copiedPages = await pdfDoc.copyPages(tempDoc, tempDoc.getPageIndices());\n          copiedPages.forEach((page) => pdfDoc.addPage(page));\n        } else if (file.type === 'image/jpeg' || file.type === 'image/jpg' || file.type === 'image/png') {\n          const imgBytes = await file.arrayBuffer();\n          let image;\n\n          if (file.type === 'image/jpeg' || file.type === 'image/jpg') {\n            try {\n              image = await pdfDoc.embedJpg(imgBytes);\n            } catch (error) {\n              alert('Error processing JPEG file: ' + file.name + '. ' + error.message);\n              continue;\n            }\n          } else if (file.type === 'image/png') {\n            try {\n              image = await pdfDoc.embedPng(imgBytes);\n            } catch (error) {\n              alert('Error processing PNG file: ' + file.name + '. ' + error.message);\n              continue;\n            }\n          }\n\n          // Create a new page for each image\n          const page = pdfDoc.addPage([image.width, image.height]);\n          page.drawImage(image, {\n            x: 0,\n            y: 0,\n            width: image.width,\n            height: image.height,\n          });\n        } else {\n          alert('Unsupported file type: ' + file.type);\n          return;\n        }\n      }\n\n      downloadPDF(await pdfDoc.save(), 'merged-pdfs-and-images.pdf');\n      setMergeSuccess(true);\n    } catch (error) {\n      console.error(\"Error merging files:\", error);\n      alert(\"An error occurred while merging files. Please try again.\");\n    } finally {\n      setIsMerging(false);\n    }\n  };\n\n  const downloadPDF = (pdfBytes, filename) => {\n    const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n    const url = URL.createObjectURL(blob);\n\n    // Create a link to download the merged PDF\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link); // Append to body to make it work in Firefox\n    link.click();\n    document.body.removeChild(link); // Clean up\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  // Create description element for the Layout\n  const descriptionElement = (\n    <div className=\"info-box\">\n      <Info size={20} />\n      <p>\n        Merge PDFs and Images into a single document with ease. Files will be merged in alphabetical order by filename.\n      </p>\n    </div>\n  );\n\n  return (\n    <Layout\n      title=\"Merge PDFs & Images Instantly\"\n      description={descriptionElement}\n    >\n\n      <div className=\"tab-container\">\n        <button\n          className={`tab-button ${activeTab === 'pdfs' ? 'active' : ''}`}\n          onClick={() => handleTabClick('pdfs')}\n        >\n          <FileText size={18} />\n          Merge PDFs\n        </button>\n        <button\n          className={`tab-button ${activeTab === 'images' ? 'active' : ''}`}\n          onClick={() => handleTabClick('images')}\n        >\n          <Image size={18} />\n          Merge Images\n        </button>\n        <button\n          className={`tab-button ${activeTab === 'both' ? 'active' : ''}`}\n          onClick={() => handleTabClick('both')}\n        >\n          <FileText size={18} />\n          <Image size={18} />\n          Merge Both\n        </button>\n      </div>\n\n      <div className=\"tab-content\">\n        {activeTab === 'pdfs' && (\n          <section className=\"merge-section\">\n            <div\n              className={`drop-zone ${dragActive ? 'active' : ''}`}\n              onDragEnter={handleDragEnter}\n              onDragLeave={handleDragLeave}\n              onDragOver={handleDragOver}\n              onDrop={handleDrop}\n            >\n              <div className=\"drop-zone-content\">\n                <UploadCloud size={48} className=\"upload-icon\" />\n                <p>Drag & drop PDF files here, or</p>\n                <label className=\"file-input-label\">\n                  <span>Choose Files</span>\n                  <input\n                    type=\"file\"\n                    multiple\n                    accept=\".pdf\"\n                    onChange={handlePdfChange}\n                    className=\"file-input\"\n                  />\n                </label>\n              </div>\n            </div>\n\n            {pdfFiles.length > 0 && (\n              <div className=\"file-list-container\">\n                <div className=\"file-list-header\">\n                  <h3>Selected PDFs: {pdfFiles.length}</h3>\n                  <button onClick={clearAll} className=\"clear-button\">Clear All</button>\n                </div>\n\n                <div className=\"file-list\">\n                  <ul>\n                    {pdfFiles.map((file, index) => (\n                      <li key={index} className=\"file-item\">\n                        <div className=\"file-info\">\n                          <FileText size={16} className=\"file-icon\" />\n                          <span className=\"file-name\">{file.name}</span>\n                          <span className=\"file-size\">{formatFileSize(file.size)}</span>\n                        </div>\n                        <button\n                          className=\"remove-file\"\n                          onClick={() => removeFile('pdf', index)}\n                          aria-label=\"Remove file\"\n                        >\n                          &times;\n                        </button>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n\n                <button\n                  onClick={mergePDFs}\n                  disabled={pdfFiles.length === 0 || isMerging}\n                  className=\"merge-button\"\n                >\n                  {isMerging ? <Loader className=\"spinner\" /> : 'Merge PDFs'}\n                </button>\n\n                {mergeSuccess && (\n                  <div className=\"success-message\">\n                    <Check size={18} />\n                    <span>PDFs merged successfully!</span>\n                  </div>\n                )}\n              </div>\n            )}\n          </section>\n        )}\n\n        {activeTab === 'images' && (\n          <section className=\"merge-section\">\n            <div\n              className={`drop-zone ${dragActive ? 'active' : ''}`}\n              onDragEnter={handleDragEnter}\n              onDragLeave={handleDragLeave}\n              onDragOver={handleDragOver}\n              onDrop={handleDrop}\n            >\n              <div className=\"drop-zone-content\">\n                <UploadCloud size={48} className=\"upload-icon\" />\n                <p>Drag & drop image files here, or</p>\n                <label className=\"file-input-label\">\n                  <span>Choose Files</span>\n                  <input\n                    type=\"file\"\n                    multiple\n                    accept=\".jpg,.jpeg,.png\"\n                    onChange={handleImageChange}\n                    className=\"file-input\"\n                  />\n                </label>\n              </div>\n            </div>\n\n            {imageFiles.length > 0 && (\n              <div className=\"file-list-container\">\n                <div className=\"file-list-header\">\n                  <h3>Selected Images: {imageFiles.length}</h3>\n                  <button onClick={clearAll} className=\"clear-button\">Clear All</button>\n                </div>\n\n                <div className=\"file-list\">\n                  <ul>\n                    {imageFiles.map((file, index) => (\n                      <li key={index} className=\"file-item\">\n                        <div className=\"file-info\">\n                          <Image size={16} className=\"file-icon\" />\n                          <span className=\"file-name\">{file.name}</span>\n                          <span className=\"file-size\">{formatFileSize(file.size)}</span>\n                        </div>\n                        <button\n                          className=\"remove-file\"\n                          onClick={() => removeFile('image', index)}\n                          aria-label=\"Remove file\"\n                        >\n                          &times;\n                        </button>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n\n                <button\n                  onClick={mergeImages}\n                  disabled={imageFiles.length === 0 || isMerging}\n                  className=\"merge-button\"\n                >\n                  {isMerging ? <Loader className=\"spinner\" /> : 'Merge Images'}\n                </button>\n\n                {mergeSuccess && (\n                  <div className=\"success-message\">\n                    <Check size={18} />\n                    <span>Images merged successfully!</span>\n                  </div>\n                )}\n              </div>\n            )}\n          </section>\n        )}\n\n        {activeTab === 'both' && (\n          <section className=\"merge-section\">\n            <div className=\"drop-zones-container\">\n              <div\n                className={`drop-zone ${dragActive ? 'active' : ''}`}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n              >\n                <div className=\"drop-zone-content\">\n                  <UploadCloud size={40} className=\"upload-icon\" />\n                  <p>Drag & drop files here, or</p>\n                  <div className=\"input-group\">\n                    <label className=\"file-input-label\">\n                      <FileText size={16} />\n                      <span>Choose PDFs</span>\n                      <input\n                        type=\"file\"\n                        multiple\n                        accept=\".pdf\"\n                        onChange={handlePdfChange}\n                        className=\"file-input\"\n                      />\n                    </label>\n\n                    <label className=\"file-input-label\">\n                      <Image size={16} />\n                      <span>Choose Images</span>\n                      <input\n                        type=\"file\"\n                        multiple\n                        accept=\".jpg,.jpeg,.png\"\n                        onChange={handleImageChange}\n                        className=\"file-input\"\n                      />\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {(pdfFiles.length > 0 || imageFiles.length > 0) && (\n              <div className=\"file-list-container\">\n                <div className=\"file-list-header\">\n                  <h3>Selected Files: {pdfFiles.length + imageFiles.length}</h3>\n                  <button onClick={clearAll} className=\"clear-button\">Clear All</button>\n                </div>\n\n                <div className=\"file-list\">\n                  {pdfFiles.length > 0 && (\n                    <>\n                      <div className=\"file-category\">PDFs ({pdfFiles.length})</div>\n                      <ul>\n                        {pdfFiles.map((file, index) => (\n                          <li key={`pdf-${index}`} className=\"file-item\">\n                            <div className=\"file-info\">\n                              <FileText size={16} className=\"file-icon\" />\n                              <span className=\"file-name\">{file.name}</span>\n                              <span className=\"file-size\">{formatFileSize(file.size)}</span>\n                            </div>\n                            <button\n                              className=\"remove-file\"\n                              onClick={() => removeFile('pdf', index)}\n                              aria-label=\"Remove file\"\n                            >\n                              &times;\n                            </button>\n                          </li>\n                        ))}\n                      </ul>\n                    </>\n                  )}\n\n                  {imageFiles.length > 0 && (\n                    <>\n                      <div className=\"file-category\">Images ({imageFiles.length})</div>\n                      <ul>\n                        {imageFiles.map((file, index) => (\n                          <li key={`img-${index}`} className=\"file-item\">\n                            <div className=\"file-info\">\n                              <Image size={16} className=\"file-icon\" />\n                              <span className=\"file-name\">{file.name}</span>\n                              <span className=\"file-size\">{formatFileSize(file.size)}</span>\n                            </div>\n                            <button\n                              className=\"remove-file\"\n                              onClick={() => removeFile('image', index)}\n                              aria-label=\"Remove file\"\n                            >\n                              &times;\n                            </button>\n                          </li>\n                        ))}\n                      </ul>\n                    </>\n                  )}\n                </div>\n\n                <div className=\"merge-info\">\n                  <AlertCircle size={16} />\n                  <span>Files will be merged in alphabetical order by filename.</span>\n                </div>\n\n                <button\n                  onClick={mergePDFsAndImages}\n                  disabled={(pdfFiles.length === 0 && imageFiles.length === 0) || isMerging}\n                  className=\"merge-button\"\n                >\n                  {isMerging ? <Loader className=\"spinner\" /> : 'Merge All Files'}\n                </button>\n\n                {mergeSuccess && (\n                  <div className=\"success-message\">\n                    <Check size={18} />\n                    <span>Files merged successfully!</span>\n                  </div>\n                )}\n              </div>\n            )}\n          </section>\n        )}\n      </div>\n    </Layout>\n  );\n}\n\nexport default PdfMerger;"],"names":["PdfMerger","pdfFiles","setPdfFiles","useState","imageFiles","setImageFiles","isMerging","setIsMerging","mergeSuccess","setMergeSuccess","activeTab","setActiveTab","dragActive","setDragActive","useEffect","hash","handleTabClick","tab","handlePdfChange","event","selectedFiles","handleImageChange","handleDragEnter","e","handleDragLeave","handleDragOver","handleDrop","fileList","pdfList","file","imageList","removeFile","type","index","newFiles","clearAll","mergePDFs","pdfDoc","PDFDocument","sortedFiles","b","fileBytes","tempDoc","page","fileError","downloadPDF","error","mergeImages","imgBytes","image","mergePDFsAndImages","allFiles","pdfBytes","filename","blob","url","link","formatFileSize","bytes","k","sizes","i","descriptionElement","jsxs","jsx","Info","Layout","FileText","Image","UploadCloud","Loader","Check","Fragment","AlertCircle"],"mappings":"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"}